<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://www.jbake.org</link>
    <atom:link href="http://www.jbake.org/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Sun, 30 Jan 2022 11:46:54 +0100</pubDate>
    <lastBuildDate>Sun, 30 Jan 2022 11:46:54 +0100</lastBuildDate>

    <item>
      <title>Java Image Build, Part 1</title>
      <link>http://www.jbake.org/blog_2022/java-image-build-part-1.html</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2022/java-image-build-part-1.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Historically, container images have been created predominantly by Docker. In
the meantime several competing options to create container images emerged.
All of them coming with their own pros and cons.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_whats_wrong_with_docker&quot;&gt;What&amp;#8217;s wrong with Docker?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Docker architecture requires a daemon process running as &lt;code&gt;root&lt;/code&gt;. Because
privileged processes are not permitted in all environments, e.g. on container
platforms, the usage of can be problematic. Although, there&amp;#8217;s nothing wrong
with Docker in general, in some cases other tooling may be better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_why_jib&quot;&gt;Why jib?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beside alternatives like &lt;code&gt;buildah/podman&lt;/code&gt;, &lt;code&gt;Moby Buildkit&lt;/code&gt; or &lt;code&gt;img&lt;/code&gt;, pure
Java tools are very appealing for a Java developer, because they don&amp;#8217;t have
to leave their development environment they are familiar with. Just knowledge
of Java and build tools like Maven (or Gradle) are required to create the
final package/image the application is shipped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;jib - Containerize your Java
application&lt;/a&gt;, the Java Image Build from Google, is one of the more popular
tools available for building images with the Java development environment.
Images build with &lt;code&gt;jib&lt;/code&gt; can be directly pushed to a container registry.
&lt;code&gt;jib&lt;/code&gt; comes with a Maven plugin, we&amp;#8217;re going to use in the following.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Jib also offers a Docker build mode, which utilizes Docker for creating the
image. But in this Post we have a look at the &lt;em&gt;jib-native&lt;/em&gt; build, in
which jib creates the image on its own and pushes it directly to a image
registry.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_build_setup&quot;&gt;Build Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate the image build with &lt;code&gt;jib&lt;/code&gt;, I extended the existing
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/jaxrs-jar&quot;&gt;
JAX/RS Sample Project&lt;/a&gt;. This project packages a REST API implemented as
MicroProfile application based on &lt;a href=&quot;https://docs.wildfly.org/bootablejar/&quot;&gt;
WildFly Bootable JAR&lt;/a&gt; into an Single executable JAR file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add the image build by &lt;code&gt;jib&lt;/code&gt;, the build section requires the definition
of an additional plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;build&amp;gt;
    &amp;lt;finalName&amp;gt;${project.artifactId}&amp;lt;/finalName&amp;gt;

    &amp;lt;plugins&amp;gt;
        ...
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;com.google.cloud.tools&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jib-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;containerizingMode&amp;gt;packaged&amp;lt;/containerizingMode&amp;gt;
                &amp;lt;!-- Default base image is Distroless Openjdk. For debugging
                    purposes an image with shell included can be helpful. --&amp;gt;
                &amp;lt;from&amp;gt;
                    &amp;lt;image&amp;gt;gcr.io/distroless/java:${from.image.tag}&amp;lt;/image&amp;gt;
                &amp;lt;/from&amp;gt;
                &amp;lt;to&amp;gt;
                    &amp;lt;!-- to push to external Dockerhub repo --&amp;gt;
                    &amp;lt;image&amp;gt;docker.io/guntherrotsch/jaxrs-jar:${to.image.tag}&amp;lt;/image&amp;gt;
                    &amp;lt;auth&amp;gt;
                        &amp;lt;username&amp;gt;guntherrotsch&amp;lt;/username&amp;gt;
                        &amp;lt;password&amp;gt;${docker.password}&amp;lt;/password&amp;gt;
                    &amp;lt;/auth&amp;gt;
                &amp;lt;/to&amp;gt;
                &amp;lt;container&amp;gt;
                    &amp;lt;args&amp;gt;
                        &amp;lt;!-- required to create a route --&amp;gt;
                        &amp;lt;arg&amp;gt;-b=0.0.0.0&amp;lt;/arg&amp;gt;
                    &amp;lt;/args&amp;gt;
                    &amp;lt;ports&amp;gt;
                        &amp;lt;port&amp;gt;8080&amp;lt;/port&amp;gt;
                    &amp;lt;/ports&amp;gt;
                    &amp;lt;mainClass&amp;gt;org.wildfly.core.jar.boot.Main&amp;lt;/mainClass&amp;gt;
                &amp;lt;/container&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;executions&amp;gt;
                &amp;lt;execution&amp;gt;
                    &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
                    &amp;lt;goals&amp;gt;
                        &amp;lt;!-- to push to external repo --&amp;gt;
                        &amp;lt;goal&amp;gt;build&amp;lt;/goal&amp;gt;
                    &amp;lt;/goals&amp;gt;
                &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The build configuration looks straight forward, but contains some pitfalls:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The packing of the POM needs to be: &lt;code&gt;&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nevertheless, the definition of the &lt;code&gt;war&lt;/code&gt; plugin in the build section is
required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The final name must defined: &lt;code&gt;&amp;lt;finalName&amp;gt;${project.artifactId}&amp;lt;/finalName&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Wildfly Maven Jar plugin requires both:&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;output-file-name&amp;gt;${project.artifactId}.jar&amp;lt;/output-file-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;hollow-jar&amp;gt;false&amp;lt;/hollow-jar&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The build configuration shown above also contains settings to directly push
the created image to Dockerhub. The required Dockerhub token is passed in as
system property into the build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Actually, the &lt;code&gt;&amp;lt;from&amp;gt;&lt;/code&gt; tag, which specifies the base image, is not required
and defaults to &lt;a href=&quot;https://github.com/GoogleContainerTools/distroless&quot;&gt;Google
Container Tools - Distroless&lt;/a&gt; (also see
&lt;a href=&quot;https://guntherrotsch.github.io/blog_2021/distroless-distroless.html&quot;&gt;
Blog Post: Distroless? Distroless!&lt;/a&gt;). The base image is explicitly defined
here to allow the build of the debug image alternatively - more about this
in a second.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_image_build_and_execution&quot;&gt;Image Build and Execution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Maven configuration in place the image can be build:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mvn verify jib:build -DDOCKERHUB_TOKEN=${DOCKERHUB_TOKEN}

[INFO] Scanning for projects...
[INFO]
[INFO] -------------------&amp;lt; net.gunther.wildfly:jaxrs-jar &amp;gt;--------------------
[INFO] Building jaxrs-jar 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]

...

[INFO]
[INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ jaxrs-jar ---
[INFO]
[INFO] --- maven-war-plugin:3.3.2:war (default) @ jaxrs-jar ---
[INFO] Packaging webapp
[INFO] Assembling webapp [jaxrs-jar] in [/home/gunther/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/jaxrs-jar/target/jaxrs-jar]
[INFO] Processing war project
[INFO] Building war: /home/gunther/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/jaxrs-jar/target/jaxrs-jar.war
[INFO]
[INFO] --- wildfly-jar-maven-plugin:7.0.0.Final:package (default) @ jaxrs-jar ---
[INFO] Provisioning server configuration based on the set of configured layers
[INFO] Building server based on [[wildfly@maven(org.jboss.universe:community-universe)#26.0.0.Final inherit-packages=false inheritConfigs=false]] galleon feature-packs

...

[INFO] CLI scripts execution done.
[INFO]
[INFO] --- jib-maven-plugin:3.2.0:build (default) @ jaxrs-jar ---
[INFO]
[INFO] Containerizing application to guntherrotsch/jaxrs-jar:jib...
[WARNING] Base image &apos;gcr.io/distroless/java:11-debug&apos; does not use a specific image digest - build may not be reproducible
[INFO] Using credentials from &amp;lt;to&amp;gt;&amp;lt;auth&amp;gt; for guntherrotsch/jaxrs-jar:jib
[INFO] Using base image with digest: sha256:5aef525390e139abc5762b71c598289190d335f598b5159f726c2d5cfaf1e37d
[INFO]
[INFO] Container entrypoint set to [java, -cp, @/app/jib-classpath-file, org.wildfly.core.jar.boot.Main]
[INFO] Container program arguments set to [-b=0.0.0.0]
[INFO]
[INFO] Built and pushed image as guntherrotsch/jaxrs-jar:jib
[INFO] Executing tasks:
[INFO] [============================  ] 91.7% complete
[INFO] &amp;gt; launching layer pushers
[INFO]
[INFO]
[INFO] --- jib-maven-plugin:3.2.0:build (default-cli) @ jaxrs-jar ---
[INFO]
[INFO] Containerizing application to guntherrotsch/jaxrs-jar:jib...
[WARNING] Base image &apos;gcr.io/distroless/java:11-debug&apos; does not use a specific image digest - build may not be reproducible
[INFO] Using credentials from &amp;lt;to&amp;gt;&amp;lt;auth&amp;gt; for guntherrotsch/jaxrs-jar:jib
[INFO] Using base image with digest: sha256:5aef525390e139abc5762b71c598289190d335f598b5159f726c2d5cfaf1e37d
[INFO]
[INFO] Container entrypoint set to [java, -cp, @/app/jib-classpath-file, org.wildfly.core.jar.boot.Main]
[INFO] Container program arguments set to [-b=0.0.0.0]
[INFO]
[INFO] Built and pushed image as guntherrotsch/jaxrs-jar:jib
[INFO] Executing tasks:
[INFO] [============================  ] 91.7% complete
[INFO] &amp;gt; launching layer pushers
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  55.569 s
[INFO] Finished at: 2022-01-23T13:18:45+01:00
[INFO] ------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The image is directly pushed to the configured registry, Dockerhub in this
case. Because there&amp;#8217;s no local copy of the image in Docker&amp;#8217;s cache for example,
we need to pull it prior to executing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I&amp;#8217;m using Podman instead of Docker here, but Docker would do the job equally.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ podman pull docker.io/guntherrotsch/jaxrs-jar:jib
Trying to pull docker.io/guntherrotsch/jaxrs-jar:jib...
Getting image source signatures
Copying blob 6748f1c8d3a9 done
Copying blob c6f4d1a13b69 done
Copying blob 2df365faf0e3 done
Copying blob 6c435cae1aa4 done
Copying blob a1f1879bb7de done
Copying blob 7e061386ba97 done
Copying blob 7184b4032cdf skipped: already exists
Copying blob cb0722bc62de done
Copying config 26cd06e55a done
Writing manifest to image destination
Storing signatures
26cd06e55a87e2c0125c3c2d3f9ffd2eba86383f0690fecd05e9972f105db4ff

$ podman images
REPOSITORY                         TAG     IMAGE ID      CREATED       SIZE
docker.io/guntherrotsch/jaxrs-jar  jib     07440e12af76  52 years ago  276 MB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Surprisingly, the image dates from 52 years ago, which is the default behavior
of jib: The creation timestamp is set to 1st of January 1970. The reasoning
behind is that each time an image is built with a new creation timestamp, a
different image results, at least in terms of the image checksum/id. With
jib and its default creation timestamp setting identical images result in the
same id. However, the setting can be configured differently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please inspect the image to get more insights about it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ podman inspect docker.io/guntherrotsch/jaxrs-jar:jib&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After pulling the image successfully, we can start an container using the image
and testing the application (from another shell):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ podman run --rm -it --publish &quot;0.0.0.0:8080:8080&quot; docker.io/guntherrotsch/jaxrs-jar:jib
12:28:17,355 INFO  [org.wildfly.jar] (main) WFLYJAR0007: Installed server and application in /tmp/wildfly-bootable-server16817916357726508481, took 939ms
12:28:17,673 INFO  [org.wildfly.jar] (main) WFLYJAR0008: Server options: [-b=0.0.0.0, --read-only-server-config=standalone.xml]
12:28:17,789 INFO  [org.jboss.msc] (main) JBoss MSC version 1.4.13.Final
12:28:17,799 INFO  [org.jboss.threads] (main) JBoss Threads version 2.4.0.Final
12:28:17,924 INFO  [org.jboss.as] (MSC service thread 1-3) WFLYSRV0049: WildFly Full 26.0.0.Final (WildFly Core 18.0.0.Final) starting
...
12:28:21,441 INFO  [org.jboss.as.server] (Controller Boot Thread) WFLYSRV0010: Deployed &quot;jaxrs-jar.war&quot; (runtime-name : &quot;ROOT.war&quot;)
12:28:21,476 INFO  [org.jboss.as.server] (Controller Boot Thread) WFLYSRV0212: Resuming server
12:28:21,478 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0025: WildFly Full 26.0.0.Final (WildFly Core 18.0.0.Final) started in 3799ms - Started 160 of 166 services (33 services are lazy, passive or on-demand)
12:28:21,480 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
12:28:21,480 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0054: Admin console is not enabled


# Testing the application (from different shell window):

$ curl localhost:8080/hello
Hello from Wildfly JAR
$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_debug_image&quot;&gt;Debug Image&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I already mentioned that I want to be able to switch to build a debug image of
the distroless Java base image. For that reason the Maven POM contains an
additional &lt;code&gt;jib-debug-image&lt;/code&gt; profile with tag configurations as Maven
properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;jib-image&amp;lt;/id&amp;gt;
        &amp;lt;activation&amp;gt;
            &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
        &amp;lt;/activation&amp;gt;
        &amp;lt;properties&amp;gt;
            &amp;lt;from.image.tag&amp;gt;11&amp;lt;/from.image.tag&amp;gt;
            &amp;lt;to.image.tag&amp;gt;jib&amp;lt;/to.image.tag&amp;gt;
        &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;jib-debug-image&amp;lt;/id&amp;gt;
        &amp;lt;activation&amp;gt;
            &amp;lt;activeByDefault&amp;gt;false&amp;lt;/activeByDefault&amp;gt;
        &amp;lt;/activation&amp;gt;
        &amp;lt;properties&amp;gt;
            &amp;lt;from.image.tag&amp;gt;11-debug&amp;lt;/from.image.tag&amp;gt;
            &amp;lt;to.image.tag&amp;gt;jib-debug&amp;lt;/to.image.tag&amp;gt;
        &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
&amp;lt;/profiles&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This definition (together with the configuration of the Maven jib plugin above)
allows to create a debug version of the application image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;sehll&quot;&gt;$ mvn verify jib:build -DDOCKERHUB_TOKEN=${DOCKERHUB_TOKEN} -Pjib-debug-image
...

$ podman pull docker.io/guntherrotsch/jaxrs-jar:jib-debug
...

$ podman images
REPOSITORY                         TAG        IMAGE ID      CREATED       SIZE
docker.io/guntherrotsch/jaxrs-jar  jib        07440e12af76  52 years ago  276 MB
docker.io/guntherrotsch/jaxrs-jar  jib-debug  ad70cdb363dd  52 years ago  505 MB&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The distroless debug image adds a shell and other command-line tools to the
application image. The resulting image is almost twice the size of the plain
distroless Java image and not meant to go into production. But for development
it might be sometimes useful to exec into a shell in the container for analyzing
issues. Let&amp;#8217;s check the Java version using the debug image&amp;#8217;s shell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ podman exec -it 1c46b504e801 sh
/ # ps
PID   USER     TIME  COMMAND
    1 root      0:16 java -cp @/app/jib-classpath-file org.wildfly.core.jar.boot.Main -b=0.0.0.0
   76 root      0:00 sh
   77 root      0:00 ps
/ # java -version
openjdk version &quot;11.0.13&quot; 2021-10-19
OpenJDK Runtime Environment (build 11.0.13+8-post-Debian-1deb11u1)
OpenJDK 64-Bit Server VM (build 11.0.13+8-post-Debian-1deb11u1, mixed mode)
/ #&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The jib tooling provides an easy and straight-forward way to build containerized
Java applications without leaving the Java development environment. Even a
Dockerfile is not required at all, just proper configuration of the Maven
(or Gradle) build plugin is required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While we packaged the Wildfly REST application into a single jar, this bootable
jar is rebuilt each time the app is built. This is sub-optimal because major
parts of the application, the included &lt;em&gt;just-enough&lt;/em&gt; application server, does
not change, only the actual application changes from build to build. In the
next part of this mini-series, we look at the decoupling of server packaging
and app packaging, to optimize the image build further.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;Google Container Tools - jib&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/jaxrs-jar&quot;&gt;
Simple JAX/RS Demo Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.wildfly.org/bootablejar/&quot;&gt;WildFly Bootable JAR Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/distroless&quot;&gt;Google Container Tools - Distroless&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Jakarta MVC with FreeMarker, part 2</title>
      <link>http://www.jbake.org/blog_2021/jakarta-mvc-freemarker2.html</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/jakarta-mvc-freemarker2.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Blog Post
&lt;a href=&quot;https://guntherrotsch.github.io/blog_2021/jakarta-mvc-freemarker.html&quot;&gt;
Jakarta MVC with FreeMarker&lt;/a&gt; demonstrated the integration of the
&lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;FreeMarker Java Template Engine&lt;/a&gt;
as &lt;em&gt;ViewEngine&lt;/em&gt; into Jakarta EE MVC in a very basic way. Only the
implementation of mandatory features have been included. Please have a
look at linked article for more about Jakarta EE MVC in general and
the integration approach taken.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beside the mandatory features, the
&lt;a href=&quot;https://jakarta.ee/specifications/mvc/&quot;&gt;Jakarta MVC specification&lt;/a&gt; recommends
the implementation of the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;MvcConext&lt;/code&gt; object should be available in the view engine&amp;#8217;s templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Named CDI beans should be resolved and made available for view templates&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this Blog Post we&amp;#8217;ll have a look at these features and how they can be
implemented with the Freemarker View Engine described in the previous article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The code snippets presented below are shortened to concentrate to the crucial
parts. The complete sample code is hosted on
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/mvc-demo&quot;&gt;
code branch in Github repo&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mvccontext&quot;&gt;MvcContext&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we&amp;#8217;ll have a look at the &lt;code&gt;MvcContext&lt;/code&gt; object and how to integrate it
into Freemarker templates.
Let&amp;#8217;s start with the description of the expected behavior, i.e. with a the
specification of the requirement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For demonstration purposes we create a simple page with endpoint &lt;code&gt;/context&lt;/code&gt;,
that displays the content of the &lt;code&gt;MvcContext&lt;/code&gt; of requests:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Path(&quot;/context&quot;)
@Controller
@RequestScoped
public class ContextController {

	@GET
	public String show() {
		return &quot;context.ftl&quot;;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MVC controller just serves as entry point to the &lt;code&gt;/context&lt;/code&gt; page. The
referenced Freemarker template will use the &lt;code&gt;mvc&lt;/code&gt; field of the template
model object to generate the HTML view:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;MVC Context&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;MVC Context&amp;lt;/h1&amp;gt;
  &amp;lt;pre&amp;gt;
  Application&apos;s base path     : ${mvc.basePath}
  Local                       : ${mvc.locale}
  URI (GreetController#hello) : ${mvc.uri(&quot;GreetController#hello&quot;)}
  URI (GreetController#hi)    : ${mvc.uri(&quot;GreetController#hi&quot;)}
  &amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note, that we do not only access plain properties of &lt;code&gt;MvcContext&lt;/code&gt;
like &lt;code&gt;basePath&lt;/code&gt; or &lt;code&gt;locale&lt;/code&gt;, but also call the convenience method &lt;code&gt;uri&lt;/code&gt; to
generate the URI from a controller method&amp;#8217;s reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To accomplish the described behavior we extend the &lt;code&gt;FreeMarkerViewEngine&lt;/code&gt;
already described in the first article as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class FreeMarkerViewEngine implements ViewEngine {

	@Inject
	MvcContext mvcContext; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    ...

	@Override
	public void processView(ViewEngineContext context) throws ViewEngineException {

		Models models = context.getModels();
		models.put(&quot;mvc&quot;, mvcContext); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

	    ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Injection of &lt;code&gt;MvcContext&lt;/code&gt; object which is to be made available in templates.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Adding injected &lt;code&gt;MvcContext&lt;/code&gt; under key &lt;code&gt;mvc&lt;/code&gt; to the &lt;code&gt;MvcModel&lt;/code&gt; object.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;MvcContext&lt;/code&gt; is a request scoped CDI bean, which can be injected into
our Freemarker View Engine. Adding the context under key &lt;code&gt;mvc&lt;/code&gt; to the
MVC model makes the context available to the Freemarker template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MVC&amp;#8217;s &lt;code&gt;Model&lt;/code&gt; object holds named substitutions to be used in templates.
This map-like object is passed into the Freemarker method to process templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Requesting the sample controller shown above renders in the Browser to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/Mvc_Context.png&quot; alt=&quot;MvcContext View&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This works fine because Freemarker wraps Java objects contained in the passed
in template model into &lt;code&gt;TemplateModel&lt;/code&gt; objects. The interface &lt;code&gt;TemplateModel&lt;/code&gt;
founds the base of a hierarchy of objects, which can be used in Freemarker
templates to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;resolve simple scalar values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reference properties of Java beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;call any methods on wrapped Java objects&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ll find more details in the
&lt;a href=&quot;https://freemarker.apache.org/docs/ref.html&quot;&gt;Freemarker Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_named_bean_resolution&quot;&gt;Named Bean Resolution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resolution of named CDI beans is more a bit of challenge. If we look at
the standard view engine JSP, which is shipped with Jakarta MVC, named
CDI beans are resolved by embedded Jakarta Expression Language (EL).
However, Freemarker does not embed EL, but instead has its own powerful
template language to evaluate expressions, whicj are eventually relying on
Java functionality. Instead of extending Freemarker with the standard
Expression Language, it&amp;#8217;s a more natural choice to make named CDI beans
available to the Freemarker Template Language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before diving into the implementation details of named CDI bean resolution
for our Freemarker integration, we&amp;#8217;re going to describe the expected behavior.
This again is not a formal specification of the requirement, but rather a
&lt;em&gt;spec by example&lt;/em&gt; definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_specification&quot;&gt;Specification&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The entry point of our test page is a &lt;code&gt;/hi&lt;/code&gt;, whereby this the controller&amp;#8217;s
method expects a &lt;code&gt;name&lt;/code&gt; query parameter denoting the person to greet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;    ...

    @Path(&quot;hi&quot;)
    @GET
    public String hi(@QueryParam(&quot;name&quot;) String name) {
        models.put(&quot;visitor&quot;, name);
        return &quot;randomGreeting.ftl&quot;;
    }

    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MVC controller forwards the request for rendering to the Freemarker
template &lt;code&gt;randomGreeting.ftl&lt;/code&gt;.
As the name suggests, the greeting returned to the user is not hard-coded,
but randomly selected from a list of available greetings. The selection
mechanism is actually provided by named CDI &lt;code&gt;greetingGenerator&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Named(&quot;greetingGenerator&quot;)
public class GreetingGenerator {

	private static final List&amp;lt;String&amp;gt; greetingTemplates
                                = Arrays.asList(&quot;Hi %s&quot;, &quot;Hello %s&quot;, &quot;Ciao %s&quot;);

	public String select(String name) {
		String greetingTemplate = greetingTemplates
				.get(ThreadLocalRandom.current().nextInt(0, greetingTemplates.size()));
		return String.format(greetingTemplate, name);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;select&lt;/code&gt; method of this CDI bean takes the name of the person to greet
as argument and integrates the given name into a randomly selected greeting
pattern. With this program logic in place, we&amp;#8217;re going to use the named CDI
bean in the Freemarker template, i.e. our view, as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Welcome!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;${named(&quot;greetingGenerator&quot;).select(visitor)}!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The named CDI bean is explicitly resolved by the &lt;code&gt;named&lt;/code&gt; function. On the
returned bean arbitrary methods, like the &lt;code&gt;select&lt;/code&gt;, can be called. But it&amp;#8217;s
also possible to access plain and simple properties from those objects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation of the described feature is based on the fact, that the
Freemarker template engine can be extended by methods on demand. The &lt;code&gt;named&lt;/code&gt;
method used in the sample template is such a method extension, which need
to be registered in the template model in the first place:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class FreeMarkerViewEngine implements ViewEngine {

    ...

    @Override
    public void processView(ViewEngineContext context) throws ViewEngineException {

    	Models models = context.getModels();
        models.put(&quot;named&quot;, new NamedBeanResolver());

        ...
    }
    ....
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This registration of the &lt;code&gt;named&lt;/code&gt; method is very much the same as we&amp;#8217;ve already
seen with the &lt;code&gt;mvc&lt;/code&gt; context above. In this case the &lt;code&gt;named&lt;/code&gt; method is an
instance of the &lt;code&gt;NamedBeanResolver&lt;/code&gt; class, which implements a standard
extension pattern for the Freemarker template engine:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class NamedBeanResolver implements TemplateMethodModelEx {

	@Override
	@SuppressWarnings(&quot;rawtypes&quot;)
	public TemplateModel exec(List args) throws TemplateModelException {
		if (args.size() != 1) {
			throw new TemplateModelException(&quot;Wrong arguments&quot;);
		}
		SimpleScalar beanName = (SimpleScalar) args.get(0); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
		Object namedBean = CDI.current().select(Object.class,
                                                new NamedAnnotation(beanName.getAsString())).get(); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
		DefaultObjectWrapper objectWrapper = new DefaultObjectWrapperBuilder(new Version(&quot;2.3.31&quot;)).build();
		return objectWrapper.wrap(namedBean); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The first (and only) argument of the &lt;code&gt;named&lt;/code&gt; method is of type
&lt;code&gt;SimpleScalar&lt;/code&gt;, which should contain the name of the CDI bean to be resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The CDI container is used to resolve the named bean.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The resolved CDI bean is eventually wrapped into a object, that can be
consumed by Freemarker templates.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The &lt;code&gt;SimpleScalar&lt;/code&gt; object and the wrapped named bean are derived from
the earlier mentioned &lt;code&gt;TemplateModel&lt;/code&gt;. Please have a look at the
&lt;a href=&quot;https://freemarker.apache.org/docs/ref.html&quot;&gt;Freemarker Reference&lt;/a&gt; for
more information about Freemarker, its capabilities and extensibility.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we now several times navigate to out test page on endpoint
&lt;code&gt;/hi?name=Gunther&lt;/code&gt; times, a mix of the following three result pages are
shown in random order:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/Mvc_Greeting_Hi.png&quot; alt=&quot;Hi Gunther&quot; width=&quot;Greeting View&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/Mvc_Greeting_Hello.png&quot; alt=&quot;Hello Gunther&quot; width=&quot;Greeting View&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/Mvc_Greeting_Ciao.png&quot; alt=&quot;Ciao Gunther&quot; width=&quot;Greeting View&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The displayed pages clearly indicates that the (random) output is actually
based on the named CDI bean &lt;code&gt;greetingController&lt;/code&gt;. The &lt;code&gt;greetingController&lt;/code&gt;
is a dependent-scoped bean, but the named beans resolved by the
&lt;code&gt;NamedBeanResolver&lt;/code&gt; class can be of any scope, as long as the scope is
active during the processing of the view.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo project shows the ease of use of the Jakarta MVC view technology
and the simplicity of integrating different template engines. The main
reasons for this are mainly because Jakarta MVC is based on the well-known
and mature technologies CDI and JAX/RS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The introduced integration of Freemarker as view engine, in particular the
named CDI bean resolution, also demonstrates the power of the Freemarker
template engine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://guntherrotsch.github.io/blog_2021/jakarta-mvc-freemarker.html&quot;&gt;
Blog Post - Jakarta MVC with FreeMarker, part 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jakarta.ee/specifications/mvc/&quot;&gt;Jakarta MVC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;FreeMarker Java Template Engine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/mvc-demo&quot;&gt;
Sample Project Code on Github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Code-First REST API Development</title>
      <link>http://www.jbake.org/blog_2021/rest-api-code-first.html</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/rest-api-code-first.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_rest_api_development_approaches&quot;&gt;REST API Development Approaches&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, REST API design is about specifying a contract that end users
can utilize to understand how to work best with an API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two most popular approaches for developing REST APIs are Design-First and
Code-First.
According to
&lt;a href=&quot;https://swagger.io/blog/api-design/design-first-or-code-first-api-development/&quot;&gt;
Design First or Code First: What’s the Best Approach to API Development?&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Design-First&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The planned API is converted to a human readable contract, such as OpenAPI
specification, from which the code is built.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Code-First&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The API is based on the business requirements directly coded. From this code
a human and/or machine readable document, such as OpenAPI specification, can
be generated.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;API design is a matter of experience. The Design-First approach emphasizes
this fact by bringing the API into the center of focus from the very
beginning. Well designed APIs help users quickly understand and integrate
APIs into their applications. This is especially important if target audience
is external. The Design-First approach also ensures good communication to
the end users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For mentioned reasons the Design-First seems to be a very decent development
approach. Why should we go for Code-First - apart from the fact that I
personally practiced Design-First a lot but never followed the Code-First way
and are keen to learn something new :-).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Code-First approach starts with implementing an executable version of the
REST API. Thus, when delivery speed matters it is favored over Design-First.
The Code-First is often applied for development of internal APIs.
For (Java) developers coding is often easier to get started with a project.
Furthermore, the generation of code from an OpenAPI specification when
practicing Design-First typically requires additional tooling, e.g. code
generators, which brings an additional level of complexity to the development
environment. This can be avoided with Code-First development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today both approaches, Design-First as well as Code-First, are usually based
on API specifications in OpenAPI format. I.e. the API specification is human
and machine readable in any case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_code_first&quot;&gt;Code-First&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to demonstrate the support of Code-First by Eclipse MicroProfile,
the &lt;a href=&quot;https://start.microprofile.io/&quot;&gt;MicroProfile Starter Page&lt;/a&gt; can be visited.
After selecting MicroProfile Version 4.0, Wildfly Runtime, and at least
check OpenAPI, you can download a project skeleton as zipped archive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The downloaded project skeleton comes with some sample resources already.
Here for example parts of the JAX/RS resource class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;import org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;
import org.eclipse.microprofile.openapi.annotations.info.Info;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;

@Path(&quot;/booking&quot;)
@ApplicationScoped
@OpenAPIDefinition(info = @Info(title = &quot;Booking endpoint&quot;, version = &quot;1.0&quot;))
public class BookingController {

    @APIResponses(value = {
            @APIResponse(
                    responseCode = &quot;200&quot;,
                    description = &quot;Booking for id&quot;,
                    content = @Content(
                            mediaType = MediaType.APPLICATION_JSON,
                            schema = @Schema(ref = &quot;Booking&quot;)
                    )
            ),
            @APIResponse(
                    responseCode = &quot;404&quot;,
                    description = &quot;No booking found for the id.&quot;)
    })
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path(&quot;{bookingId}&quot;)
    public Response getBooking(@PathParam(&quot;bookingId&quot;) String bookingId) {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the JAX/RS Java code, the annotations of the MicroProfile
OpenAPI package describe the REST API in more detail. The referenced
REST resource is also included in the sample code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;import org.eclipse.microprofile.openapi.annotations.media.Schema;


@Schema(name=&quot;Booking&quot;)
public class Booking {
    @Schema(required = true, description = &quot;Booking id&quot;)
    private String id;
    @Schema(required = true, description = &quot;Description of the destination&quot;)
    private Destination destination;
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again the MicroProfile OpenAPI annotation marks the class as a REST resource.
The &lt;a href=&quot;https://microprofile.io/project/eclipse/microprofile-open-api&quot;&gt;Eclipse
MicroProfile OpenAPI specification&lt;/a&gt; documents supported annotations in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without any further coding the sample project can be built and started with&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;unzip downloaded archive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;change working directory of shell to the project root&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;build the sample project with &lt;code&gt;mvn clean package&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;start the application with &lt;code&gt;java -jar target/code-first-api-bootable.jar&lt;/code&gt;
(given you named the project &lt;code&gt;code-first-api&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application offers an &lt;code&gt;/openapi&lt;/code&gt; endpoint, which can be requested
as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ curl localhost:8080/openapi
---
openapi: 3.0.3
info:
  title: ROOT.war
  version: &quot;1.0&quot;
servers:
- url: /
paths:
  /booking/{bookingId}:
    get:
      parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          type: string
      responses:
        &quot;200&quot;:
          description: Booking for id
          content:
            application/json:
              schema:
                $ref: &apos;#/components/schemas/Booking&apos;
        &quot;404&quot;:
          description: No booking found for the id.
  /hello:
    get:
      responses:
        &quot;200&quot;:
          description: OK
          content:
            &apos;*/*&apos;:
              schema:
                type: string
components:
  schemas:
    Booking:
      required:
      - id
      - destination
      type: object
      properties:
        id:
          description: Booking id
          type: string
        destination:
          allOf:
          - $ref: &apos;#/components/schemas/Destination&apos;
          - description: Description of the destination
    Destination:
      type: object
      properties:
        country:
          type: string
        city:
          type: string&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do you recognize the definitions from the sample code? Beside the
introspected JAX/RS definitions, the annotation values have also been
collected and assembled into a standard OpenAPI specification.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Code-First development approach is well supported by Eclipse
MicroProfile. As an experienced Java developer you can start by implementing
the JAX/RS REST API. Users of the API immediately get an executable
API to work with. Actually, I suggest the following process:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Implement REST API with JAX/RS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add dummy functionality to the controller classes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add minimal documentation by attaching MicroProfile OpenAPI annotations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Publish draft API to discuss and adjust with users&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhance documentation and add actual functionality&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iteratively go to 4. till users are satisfied with the API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finalize the application and its documentation&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This way you benefit from having an executable version of the API very
early. Users will appreciate the ability to &lt;em&gt;practice&lt;/em&gt; with the API
and not just &lt;em&gt;theoretically&lt;/em&gt; study the OpenAPI specification as with
the Design-First approach &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://swagger.io/blog/api-design/design-first-or-code-first-api-development/&quot;&gt;
Swagger Blog: Design First or Code First: What’s the Best Approach to API
Development?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://microprofile.io/project/eclipse/microprofile-open-api&quot;&gt;Eclipse MicroProfile OpenApi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://start.microprofile.io/&quot;&gt;MicroProfile Starter Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. An iterative approach with involvement of users is always recommended to get a usable API, even in Design-First development. Also with Design-First an early (dummy) implementation is beneficial, which can be accomplished by applying OpenAPI generators with little effort.
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Framework-less Dependency Injection Applied, Part 2</title>
      <link>http://www.jbake.org/blog_2021/dependency-injection-part-2.html</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/dependency-injection-part-2.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;
In the first part of the series
&lt;a href=&quot;https://guntherrotsch.github.io/blog_2021/dependency-injection-part-1.html&quot;&gt;
Framework-less Dependency Injection Applied&lt;/a&gt; a simple software design, has
been presented to wire beans by dependency injection. The design is based on
Java&amp;#8217;s functional suppliers. In this series we&amp;#8217;ll take a look at implementing
scoped beans. Because the design pattern applied is very similar, it might be
a good idea to revisit part 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When I in the following compare the properties of scoped beans of the
&quot;Dependency Injection without Framework&quot; with CDI, it&amp;#8217;s because I&amp;#8217;m familar
with Jakarta EE CDI. But Spring and most other DI containers work
very similar.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Jakarta EE&amp;#8217;s CDI (&lt;a href=&quot;https://jakarta.ee/specifications/cdi/&quot;&gt;Specification&lt;/a&gt;)
every bean does have a certain scope, which can be a real scope or a pseudo
scope. In terms of CDI the manually wired beans described in the previous
article of the series are beans in pseudo-scope &lt;code&gt;@Dependent&lt;/code&gt;. For each
injection point a new instance of the injected bean is created. This is
not always desired. Therefore, CDI provides other scopes in addition, for
example&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ApplicationScoped&lt;/code&gt; for singletons over the lifetime of an application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RequestScoped&lt;/code&gt; for beans created per request&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following the request scope is discussed in detail. Other scopes are
similar to implement, if not even simpler. You can find the code of the example
in this
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/di-without-framework&quot;&gt;
Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_request_scoped_beans&quot;&gt;Request Scoped Beans&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the implementation we assume the classical execution model, which is
defined as &quot;request per thread&quot;. The thread to process a request&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;is taken from a thread pool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;is occupied for the entire request processing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;does not take part in the processing of other requests at the same time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;is returned into a thread pool when request processing is finished&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Jakarta EE programming and execution model allows the implementation of
request scoped beans by using &lt;code&gt;ThreadLocal&lt;/code&gt; variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The request scope beans are different to dependent scoped beans in regard to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The same instance of request scoped bean is used for every injection point
during a single request processing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The request context need to be started and stopped explicitly. Request scoped
beans can be injected outside an active request context, but resolution of
request scoped beans outside of an active context gives a runtime error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These two properties drives the implementation in the following chapters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_request_scope_implementation&quot;&gt;Request Scope Implementation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to address the first property, we need to keep track of instantiated
beans per request. This can be accomplished by utilizing a thread local map
of instantiated beans keyed by the class of the bean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public final class RequestScoped&amp;lt;T&amp;gt; implements Supplier&amp;lt;T&amp;gt; {

	private static ThreadLocal&amp;lt;Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;&amp;gt; instances = new ThreadLocal&amp;lt;&amp;gt;();

    private final Supplier&amp;lt;T&amp;gt; delegate;
    private final Class&amp;lt;T&amp;gt; clazz;

    private RequestScoped(Supplier&amp;lt;T&amp;gt; delegate, Class&amp;lt;T&amp;gt; clazz) {
        this.delegate = delegate;
        this.clazz = clazz;
    }

    public static &amp;lt;T&amp;gt; RequestScoped&amp;lt;T&amp;gt; of(Supplier&amp;lt;T&amp;gt; delegate, Class&amp;lt;T&amp;gt; clazz) {
        return new RequestScoped&amp;lt;&amp;gt;(delegate, clazz);
    }

    @Override
    public T get() {
        if (instances.get() == null) {
            throw new RequestScopeNotActiveException();
        }
        return clazz.cast(instances.get().computeIfAbsent(clazz, clazz -&amp;gt; delegate.get()));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The definition of request scoped beans looks almost the same as dependent
scoped beans that are initialized eagerly or lazily:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class MyRequestScopedBean {

	public static Supplier&amp;lt;MyRequestScopedBean&amp;gt; supplier() {
		return RequestScoped.of(MyRequestScopedBean::new, MyRequestScopedBean.class);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only difference is the bean&amp;#8217;s class which has to be passed to the
&lt;code&gt;RequestScoped.of&lt;/code&gt; method. The class becomes the key of the map of instances
in request scope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please also note that request scoped beans are always initialized lazily.
This allows the injection of such beans without request context.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_request_context_implementation&quot;&gt;Request Context Implementation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The actual functionality to start a request scope is hosted in the
&lt;code&gt;RequestScoped&lt;/code&gt; class. The &lt;code&gt;start&lt;/code&gt; method is called at the beginning of the
request processing (on start of the request scope). The method creates the
thread-local map of bean instances for the new request.
When the request processing finishes (on close of the request scope), the map
is destroyed by calling the &lt;code&gt;stop&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;    ...
    void start() {
        synchronized (instances) {
            if (instances.get() != null) {
                throw new RequestScopeAlreadyActiveException();
            }
            instances.set(new ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;());
        }
    }

    void stop() {
        synchronized (instances) {
            instances.set(null);
        }
    }
    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To encapsulate starting and stopping into a nice API, a factory method for
instances of &lt;code&gt;RequestContext&lt;/code&gt; has been added to the &lt;code&gt;RequestScoped&lt;/code&gt; class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public static RequestContext getContext() {
    return new RequestContext(new RequestScoped&amp;lt;&amp;gt;());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;RequestContext&lt;/code&gt; is defined as &lt;code&gt;AutoCloseable&lt;/code&gt; as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class RequestContext implements AutoCloseable {

	private RequestScoped&amp;lt;Void&amp;gt; scope;

	RequestContext(RequestScoped&amp;lt;Void&amp;gt; requestScoped) {
		this.scope = requestScoped;
		this.scope.start();
	}

	@Override
	public void close() throws Exception {
		scope.stop();
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because of the &lt;code&gt;AutoCloseable&lt;/code&gt; the request context can be activated and
deactivated by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;    try (RequestContext ctx = RequestScoped.getContext()) {

        // REQUEST PROCESSING GOES HERE
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The try-resource block starts and ends the request context, i.e. inside
this block request scoped beans can be resolved and used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note, that request scoped beans can be injected into beans of any other
scope (dependent scoped, application scoped, etc.) and vice versa.
The supplier redirects the call to the desired bean instance. Do you have
performance concerns because of the additional level of indirection of the
call? You shouldn&amp;#8217;t, CDI and other dependency injection containers work very
similar. The main difference is that redirecting the call
is not coded explicitly with suppliers, but via a proxy, typically byte-code
generated. The impact on the performance at runtime is approximately the same.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As already demonstrated in the first part of the series injecting collaborating
beans is easy. With a simple functional supplier design and few conventions,
even eager and lazy initialization of the injected beans is possible.
Similarly, scoped beans can be implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, I personally would dispense CDI only in small projects, because
typically other features of CDI are beneficial, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Life-cycle Management of Beans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Producers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interceptors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Events&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decorator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extensions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nevertheless, it&amp;#8217;s always good to &lt;em&gt;look behind the scenes&lt;/em&gt; to get a better
understanding of what&amp;#8217;s going on in dependency injection frameworks. And for
small projects with extreme limitations on memory resources the presented
framework-less DI approach might come in handy&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://guntherrotsch.github.io/blog_2021/dependency-injection-part-1.html&quot;&gt;
Blog Post - Framework-less Dependency Injection Applied, part 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/di-without-framework&quot;&gt;
Github Repo - Sample Implementation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jakarta.ee/specifications/cdi/&quot;&gt;Specification - Jakarta EE CDI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://guntherrotsch.github.io/blog_2020/di-without-framework.html&quot;&gt;Blog Post -
Dependency Injection without Framework&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/you-dont-need-a-dependency-injection-container-10a5d4a5f878&quot;&gt;
Blog Post - You don&amp;#8217;t need a dependency injection container&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Framework-less Dependency Injection Applied, Part 1</title>
      <link>http://www.jbake.org/blog_2021/dependency-injection-part-1.html</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/dependency-injection-part-1.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DI frameworks like Spring, Jakarta EE&amp;#8217;s CDI or Guice come with a rich feature
set, but also convey a certain complexity and feels sometimes like &lt;em&gt;black
magic&lt;/em&gt;, which some people try to avoid. Manual dependency injection is an
alternative and might even make the design of an application more obvious.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bean_wiring&quot;&gt;Bean Wiring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typical business applications follow a &lt;em&gt;Boundary-Control-Entity (BCE)&lt;/em&gt; design,
in which case the boundary layer receives requests. Those requests origin from
message queues, are received by Servlets as HTTP requests, are triggered by
users by interacting with a GUI, or even caused by timely events (cron-like
schedulers). Anyhow a request arrives at a &lt;em&gt;Boundary&lt;/em&gt; bean, the first step in
processing the request requires to assemble the objects (a.k.a. beans),
which create the result returned on the request. If you don&amp;#8217;t rely on the
dependency injection by a framework, this assembling of components need to be
accomplished explicitly, for example as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;   Response response =
     new OrderSubmission(
         new ShippingHandler(),
         new CreditCardPayment(),
         new DirectDebitPayment()
     )
      .process(request);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This sample is entirely hypothetical and is not related to any real-world project.
The article
&lt;a href=&quot;https://hackernoon.com/you-dont-need-a-dependency-injection-container-10a5d4a5f878&quot;&gt;
You don&amp;#8217;t need a dependency injection controller&lt;/a&gt; gives another example of how
the wiring of request processing beans could look like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The downside of giving up DI frameworks is that you need to explicitly wire
the beans which process requests, i.e. there are more lines of code to write
and maintain. The advantage is that the wiring of beans is explicit and you&amp;#8217;re
always aware of the objects involved in request processing, no guessing of
resolved and injected beans anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;em&gt;Explicit is better than implicit&lt;/em&gt;.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Zen of Python
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To step away from DI frameworks may be tempting, but you might miss some of the
features of those frameworks. Before diving into the different scopes provided
by for example Jakarta&amp;#8217;s CDI - that&amp;#8217;s left for the next part of this series of
articles -, we focus on a practical issue which the example provided above might
suffer from. Let&amp;#8217;s assume that&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;An order is payed by either credit card or direct debit, but never by both
of them&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiation of both components, &lt;code&gt;CreditCardPayment&lt;/code&gt; as well as
&lt;code&gt;DirectDebitPayment&lt;/code&gt; is rather expensive&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;then we want to instantiate only the payment type required by respective user&amp;#8217;s
request. Or in other words, we want to lazily initialize the required payment
type.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_lazy_initialization&quot;&gt;Lazy Initialization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As long as the already created instances are injected into the constructor of
&lt;code&gt;OrderSubmission&lt;/code&gt; bean, the initialization can only delayed by some application
specific logic. As a generic solution we could alternatively inject simple
factories from which the actual bean can be retrieved on demand. The functional
&lt;code&gt;Supplier&lt;/code&gt; object is such an simple factory. So let&amp;#8217;s rephrase the sample a
little bit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;   Response response =
     OrderSubmission.supplier(
         ShippingHandler.supplier(),
         CreditCardPayment.supplier(),
         DirectDebitPayment.supplier()
     )
      .get().process(request);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a few things to note:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Every (injectable) bean provides a static method named &lt;code&gt;supplier&lt;/code&gt;, which
returns a &lt;code&gt;Supplier&lt;/code&gt; of the bean type; this &lt;code&gt;supplier&lt;/code&gt; method takes the same
arguments the corresponding constructor would take (if there are any at all)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beans should keep a reference to the supplier of the collaborating bean
instead to the bean itself&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead of working with the beans directly, we need to call the &lt;code&gt;Supplier#get&lt;/code&gt;
method before each method call&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But how does this pattern solve out lazy initialization problem?
To understand this we need to look into the static &lt;code&gt;supplier&lt;/code&gt; methods, i.e.
have a look at the simple factories of our beans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;CreditCardPayment#supplier&lt;/code&gt; decorates the call of &lt;code&gt;new&lt;/code&gt; method with the
lazy initialization feature:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;    public static Supplier&amp;lt;CreditCardPayment&amp;gt; supplier() {
        return LazilyInitialized.of(CreditCardPayment::new);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And also the lazy initialization itself is very simple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class LazilyInitialized&amp;lt;T&amp;gt; implements Supplier&amp;lt;T&amp;gt; {

	private T instance;

	private Supplier&amp;lt;T&amp;gt; delegate;

	private LazilyInitialized(Supplier&amp;lt;T&amp;gt; delegate) {
		this.delegate = delegate;
	}

	public static &amp;lt;T&amp;gt; Supplier&amp;lt;T&amp;gt; of(Supplier&amp;lt;T&amp;gt; delegate) {
		return new LazilyInitialized&amp;lt;&amp;gt;(delegate);
	}

	@Override
	public T get() {
		if (instance == null) {
			instance = delegate.get();
		}
		return instance;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lazy initialization wraps the &lt;code&gt;Supplier&lt;/code&gt; of the generic type and returns a
&lt;code&gt;Supplier&lt;/code&gt; for the same type. With the first call of the &lt;code&gt;get&lt;/code&gt; the actual
instance of the bean type is created, but not before. An instance of
&lt;code&gt;CreditCardPayment&lt;/code&gt; is only created if the &lt;code&gt;get&lt;/code&gt; of the (decorated) factory
is called, i.e. when the bean is used the first time, hence the bean is created
and initialized lazily. On the other side, if &lt;code&gt;DirectDebitPayment&lt;/code&gt; is used
instead of &lt;code&gt;CreditCardPayment&lt;/code&gt;, then the supplier&amp;#8217;s &lt;code&gt;get&lt;/code&gt; is not called and
no instance of the &lt;code&gt;CreditCardPayment&lt;/code&gt; is created at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we have lazy initialization, eager initialization is not far away and even
more simple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;public class EagerlyInitialized&amp;lt;T&amp;gt; implements Supplier&amp;lt;T&amp;gt; {

	private T instance;

	private EagerlyInitialized(Supplier&amp;lt;T&amp;gt; delegate) {
		this.instance = delegate.get();
	}

	public static &amp;lt;T&amp;gt; Supplier&amp;lt;T&amp;gt; of(Supplier&amp;lt;T&amp;gt; delegate) {
		return new EagerlyInitialized&amp;lt;&amp;gt;(delegate);
	}

	@Override
	public T get() {
		return instance;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case of eager initialization, the bean&amp;#8217;s instance is already created when
the &lt;code&gt;Supplier&lt;/code&gt; is prepared. This instance is returned by each call of the &lt;code&gt;get&lt;/code&gt;
method, i.e. on each usage of the bean.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DI frameworks can be replaced by assembling of the components an application
manually. Even functionality like lazy initialization can be accomplished by
applying appropriate patterns and conventions. The design of the application
becomes more transparent and obvious with explicit wiring of the request
processing beans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next article, I&amp;#8217;ll demonstrate how different scopes can be implemented
for the beans. So, stay tuned&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://guntherrotsch.github.io/blog_2020/di-without-framework.html&quot;&gt;Blog Post -
Dependency Injection without Framework&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/you-dont-need-a-dependency-injection-container-10a5d4a5f878&quot;&gt;
You don&amp;#8217;t need a dependency injection container&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Functional Java: Partial Application</title>
      <link>http://www.jbake.org/blog_2021/partial-application-java.html</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/partial-application-java.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_partial_function_application&quot;&gt;Partial Function Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Partial application refers to the process of fixing some arguments of a function
and producing a function of lower arity - actually, the arity is reduced by the
number of fixed arguments. To not become to theoretical and I&amp;#8217;ll give an example:
The function&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;int add(int a, int b);&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;adds two integer numbers. If we fix an argument applying the integer number &lt;code&gt;3&lt;/code&gt;,
we get the function (in pseudo-code)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;partial(add, 3) =&amp;gt; int add3(int a)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which returns the sum of &lt;code&gt;3&lt;/code&gt; and the given integer parameter. While the function
&lt;code&gt;add&lt;/code&gt; does have the arity &lt;code&gt;2&lt;/code&gt;, the arity of &lt;code&gt;add3&lt;/code&gt; is 1, which is the arity of
function &lt;code&gt;add&lt;/code&gt; reduced by the number of fixed arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Partial application is sometimes incorrectly called currying, which is a related,
but distinct concept.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_functions_in_java&quot;&gt;Functions in Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Functions in Java are represented by objects implementing a functional interface.
In the following the &lt;code&gt;Function&lt;/code&gt; and &lt;code&gt;BiFunction&lt;/code&gt; interfaces are used to
demonstrate partial application - but the same holds for other functional
interfaces like &lt;code&gt;Supplier&lt;/code&gt;. Given a &lt;code&gt;BiFunction&lt;/code&gt; corresponding to the
introductory example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;BiFunction&amp;lt;Integer, Integer, Integer&amp;gt; add = (a, b) -&amp;gt; a + b;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To partially apply the function, we need to fix an argument and produce a
function which takes one argument. This can be accomplished by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public static &amp;lt;T, U, R&amp;gt; Function&amp;lt;U, R&amp;gt; partial(BiFunction&amp;lt;T, U, R&amp;gt; f, T x) {
  return (y) -&amp;gt; f.apply(x, y);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The function takes the &lt;code&gt;BiFunction&lt;/code&gt; plus an argument and returns a &lt;code&gt;Function&lt;/code&gt;.
The logic of the created &lt;code&gt;Function&lt;/code&gt; calls the given &lt;code&gt;BiFunction&lt;/code&gt; applying
one fixed and one call argument. The &lt;code&gt;partial&lt;/code&gt; function is used as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Function&amp;lt;Integer, Integer&amp;gt; add3 = partial(add, 3);
Assertions.assertEquals(6, add3.apply(3));&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;partial&lt;/code&gt; function implements a higher-order functions because&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it takes a function as argument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and returns a function as its result&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cool, how lambdas makes functions to first-class citizen of the Java language.
But, let&amp;#8217;s take the next step.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_generalization&quot;&gt;Generalization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; function example works fine, because it doesn&amp;#8217;t matter which
of the two arguments get fixed. More precisely, the &lt;code&gt;add&lt;/code&gt; function is
commutative, i.e. it does not matter in which order the arguments are provided,
the result will be the same.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we define a function &lt;code&gt;divide&lt;/code&gt; as follows&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;BiFunction&amp;lt;Integer, Integer, Integer&amp;gt; divide = (a, b) -&amp;gt; a / b;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the order of the arguments provided actually matters, i.e. the function is
non-commutative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first idea to solve this is to provide two functions, one partially applies
the first argument, the second partially applies the second argument:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public static &amp;lt;T, U, R&amp;gt; Function&amp;lt;U, R&amp;gt; partialFirst(BiFunction&amp;lt;T, U, R&amp;gt; f, T x) {
  return (y) -&amp;gt; f.apply(x, y);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public static &amp;lt;T, U, R&amp;gt; Function&amp;lt;T, R&amp;gt; partialSecond(BiFunction&amp;lt;T, U, R&amp;gt; f, U x) {
  return (y) -&amp;gt; f.apply(y, x);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These two functions can then used to fix the first or second argument
respectively:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Function&amp;lt;Integer, Integer&amp;gt; divideFourBy = partialFirst(divide, 4);
Assertions.assertEquals(2, divideFourBy.apply(2));&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Function&amp;lt;Integer, Integer&amp;gt; divideByTwo = partialSecond(divide, 2);
Assertions.assertEquals(2, divideByTwo.apply(4));&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The interface of &lt;code&gt;partialFirst&lt;/code&gt; and &lt;code&gt;partialSecond&lt;/code&gt; doesn&amp;#8217;t look very nice
and concise, because you need to select the right function when applying the
function arguments partially. This is even more true for functions with higher
arity - we&amp;#8217;ll come to such functions in a second. From an API point of view, it
would be nicer to have just one overloaded &lt;code&gt;partial&lt;/code&gt; function, to which you
provide &lt;em&gt;all&lt;/em&gt; arguments, some fixed, others denoted with placeholders. Let&amp;#8217;s
first define a placeholder class and instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;static class Matches {
  public static Matches _any;
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This placeholder is then used when defining the overloaded &lt;code&gt;partial&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public static &amp;lt;T, U, R&amp;gt; Function&amp;lt;U, R&amp;gt; partial(BiFunction&amp;lt;T, U, R&amp;gt; f, T x, Matches m) {
  return (y) -&amp;gt; f.apply(x, y);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public static &amp;lt;T, U, R&amp;gt; Function&amp;lt;T, R&amp;gt; partial(BiFunction&amp;lt;T, U, R&amp;gt; f, Matches m, U x) {
  return (y) -&amp;gt; f.apply(y, x);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When statically importing the placeholder instance &lt;code&gt;Matcher._any&lt;/code&gt; the partial
application looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Function&amp;lt;Integer, Integer&amp;gt; divideByFour = partial(divide, _any, 4);
Assertions.assertEquals(2, divideByFour.apply(8));&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Function&amp;lt;Integer, Integer&amp;gt; divideSixBy = assume(divide, 6, _any);
Assertions.assertEquals(3, divideSixBy.apply(2));&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The overloaded &lt;code&gt;partial&lt;/code&gt; function feels more concise on usage, because one
don&amp;#8217;t need to worry about the name of the function for partial application
and can provide the all arguments of the original function in the same order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step would be to apply this pattern to functions of higher arity.
Functions taking three arguments and map those arguments to one result
are usually called tri-function and can be defined in Java as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@FunctionalInterface
public interface TriFunction&amp;lt;T, U, V, R&amp;gt; {
  R apply(T t, U u, V v);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Increasing the arity would result in QuadFunction (4 arguments),
QuintFunction (5), SextFunction (6), SeptFunction (7), OctFunction(8)
and so on.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The definition of partial applications to generate bi-functions out of
tri-functions are straight forward:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public static &amp;lt;T, U, V, R&amp;gt; BiFunction&amp;lt;U, V, R&amp;gt; partial(TriFunction&amp;lt;T, U, V, R&amp;gt; f, T a1, Matches m2, Matches m3) {
  return (x, y) -&amp;gt; f.apply(a1, x, y);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public static &amp;lt;T, U, V, R&amp;gt; BiFunction&amp;lt;T, V, R&amp;gt; partial(TriFunction&amp;lt;T, U, V, R&amp;gt; f, Matches m1, U a2, Matches m3) {
  return (x, y) -&amp;gt; f.apply(x, a2, y);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;public static &amp;lt;T, U, V, R&amp;gt; BiFunction&amp;lt;T, U, R&amp;gt; partial(TriFunction&amp;lt;T, U, V, R&amp;gt; f, Matches m1, Matches m2, V a3) {
  return (x, y) -&amp;gt; f.apply(x, y, a3);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;partial&lt;/code&gt; function for tri-function arguments can be used very the same way
as we&amp;#8217;ve done for bi-functions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;TriFunction&amp;lt;Integer, String, List&amp;lt;String&amp;gt;, String&amp;gt; formatter =
   (indent, delimiter, strings) -&amp;gt; &quot; &quot;.repeat(indent) + strings.stream()
                                                               .collect(joining(delimiter));
BiFunction&amp;lt;Integer, List&amp;lt;String&amp;gt;, String&amp;gt; commaSeparatingFormatter = partial(formatter, _any, &quot;,&quot;, _any);
Assertions.assertEquals(&quot;   one,two,three&quot;,
                        commaSeparatingFormatter.apply(3, Arrays.asList(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)));&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the tri-function&amp;#8217;s &lt;code&gt;partial&lt;/code&gt; return a bi-function, for which &lt;code&gt;partial&lt;/code&gt;
functions are already defined, the calls can be cascaded to partially apply
even more arguments:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Function&amp;lt;List&amp;lt;String&amp;gt;, String&amp;gt;
   indentThreeCommaSeparatingFormatter = partial(
                                            partial(formatter, _any, &quot;,&quot;, _any), 3, ._any);&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Assertions.assertEquals(&quot;   one,two,three&quot;,
    indentThreeCommaSeparatingFormatter.apply(Arrays.asList(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)));&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation of partial application for functions with higher arity is
basically the same as for bi- or tri-function.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lambdas introduced functional programming features into the Java ecosystem.
With the exception of processing of streams functional programming techniques
seem to be less used by Java programmers, maybe because of the imperative and
object oriented history of Java. Nevertheless, adapting functional programming
style can be beneficial in Java, too. The partial application of functions shown
in this Blog post demonstrated the power of the functional programming style in
Java.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Partial_application&quot;&gt;Wikipedia - Partial Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;Wikipedia - Higher-order Function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Pythonic Context Managers for Java</title>
      <link>http://www.jbake.org/blog_2021/pythonic-context-manager.html</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/pythonic-context-manager.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_context_managers_in_python&quot;&gt;Context Managers in Python&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basically, Python context managers are a simple and reliable technique for the
management of resources of any kind. Context managers are objects with the
two &lt;em&gt;magic&lt;/em&gt; methods (a.k.a. dunder method) &lt;code&gt;&lt;em&gt;enter&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;&lt;em&gt;exit&lt;/em&gt;&lt;/code&gt;. If you&amp;#8217;re
not familiar with Python&amp;#8217;s &lt;em&gt;magic&lt;/em&gt; methods, the post
&lt;a href=&quot;https://medium.com/fintechexplained/advanced-python-what-are-magic-methods-d21891cf9a08&quot;&gt;
Advanced Python: What Are Magic Methods?&lt;/a&gt; gives a detailed introduction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When context managers are used in Python programs as follows&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;with MyContextManager() as c:
    // do something with c&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the method &lt;code&gt;&lt;em&gt;enter&lt;/em&gt;&lt;/code&gt; is automatically called on entering the &lt;code&gt;with&lt;/code&gt; block,
respectively, the method &lt;code&gt;&lt;em&gt;exit&lt;/em&gt;&lt;/code&gt; is called when the thread of control leaves
the &lt;code&gt;with&lt;/code&gt; block. The &lt;code&gt;&lt;em&gt;exit&lt;/em&gt;&lt;/code&gt; method is even called, when leaving the block
due to an exception. The post &lt;a href=&quot;https://martinheinz.dev/blog/34&quot;&gt;The Magic
of Python Context Managers&lt;/a&gt; describes context managers in more detail and also
lists some applications of context managers in Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;&lt;em&gt;exit&lt;/em&gt;&lt;/code&gt; often ensures, that acquired resources are released reliably.
Does this remind you of Java&amp;#8217;s &lt;code&gt;AutoCloseable&lt;/code&gt;? Although, &lt;code&gt;AutoCloseable&lt;/code&gt; are
mainly known for input and output streams, the idea to generalize the pattern
in Java is tempting. Let&amp;#8217;s give an example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sample&quot;&gt;Sample&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When testing code that makes some decisions based on System properties, it would
be nice if we could write the following test code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;System.clearProperty(&quot;KEY&quot;);

try (SystemPropertiesContext testee = SystemPropertiesContext
        .of(entry(&quot;KEY&quot;, &quot;VALUE&quot;))) {
    assertEquals(&quot;VALUE&quot;, System.getProperty(&quot;KEY&quot;));
    // testing functionality that considers the System property &quot;KEY&quot;
}

assertEquals(null, System.getProperty(&quot;KEY&quot;));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inside the &lt;code&gt;try&lt;/code&gt; block the System property keyed &lt;code&gt;KEY&lt;/code&gt; takes the value
&lt;code&gt;VALUE&lt;/code&gt;, but after leaving the &lt;code&gt;try&lt;/code&gt; block, the value is reset to whatever
the property&amp;#8217;s value was before. The &lt;em&gt;context manager&lt;/em&gt; named
&lt;code&gt;SystemPropertiesContext&lt;/code&gt; takes care of the management of these resources.
The implementation of the &lt;code&gt;SystemPropertiesContext&lt;/code&gt; looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class SystemPropertiesContext implements AutoCloseable {

	public static class Entry {
		private final String key;
		private final String value;

		private Entry(String key, String value) {
			Objects.requireNonNull(key);
			this.key = key;
			this.value = value;
		}

		public static Entry entry(String key, String value) {
			return new Entry(key, value);
		}

		public String getKey() {
			return key;
		}

		public String getValue() {
			return value;
		}
	}

	private Map&amp;lt;String, String&amp;gt; savedEntries = new HashMap&amp;lt;&amp;gt;();

	public static Entry entry(String key, String value) {
		return new Entry(key, value);
	}

	public static SystemPropertiesContext of(SystemPropertiesContext.Entry... entries) {
		SystemPropertiesContext newContext = new SystemPropertiesContext();
		for (SystemPropertiesContext.Entry entry : entries) {
			newContext.savedEntries.put(entry.getKey(), System.getProperty(entry.getKey()));
			if (entry.getValue() == null) {
				System.clearProperty(entry.getKey());
			} else {
				System.setProperty(entry.getKey(), entry.getValue());
			}
		}
		return newContext;
	}

	@Override
	public void close() throws Exception {
		for (Map.Entry&amp;lt;String, String&amp;gt; entry : savedEntries.entrySet()) {
			if (entry.getValue() == null) {
				System.clearProperty(entry.getKey());
			} else {
				System.setProperty(entry.getKey(), entry.getValue());
			}
		}
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;SystemPropertiesContext&lt;/code&gt; behaves like a context manager in Python. Here
in addition the complete unit test of the &lt;code&gt;SystemPropertiesContext&lt;/code&gt; class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;package io.github.guntherrotsch.demo.contextmanager;

import static io.github.guntherrotsch.demo.contextmanager.SystemPropertiesContext.entry;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

class SystemPropertiesContextTest {

	@Test
	void addsPropertyContextually() throws Exception {
		System.clearProperty(&quot;KEY1&quot;);

		try (SystemPropertiesContext testee = SystemPropertiesContext
				.of(entry(&quot;KEY1&quot;, &quot;VALUE1&quot;))) {
			assertEquals(&quot;VALUE1&quot;, System.getProperty(&quot;KEY1&quot;));
		}

		assertEquals(&quot;UNDEFINED&quot;, System.getProperty(&quot;KEY1&quot;, &quot;UNDEFINED&quot;));
	}

	@Test
	void addsMultiplePropertiesContextually() throws Exception {
		System.clearProperty(&quot;KEY1&quot;);
		System.clearProperty(&quot;KEY2&quot;);
		System.clearProperty(&quot;KEY3&quot;);

		try (SystemPropertiesContext testee = SystemPropertiesContext
				.of(entry(&quot;KEY1&quot;, &quot;VALUE1&quot;),entry(&quot;KEY2&quot;, &quot;VALUE2&quot;),entry(&quot;KEY3&quot;, &quot;VALUE3&quot;))) {
			assertEquals(&quot;VALUE1&quot;, System.getProperty(&quot;KEY1&quot;));
			assertEquals(&quot;VALUE2&quot;, System.getProperty(&quot;KEY2&quot;));
			assertEquals(&quot;VALUE3&quot;, System.getProperty(&quot;KEY3&quot;));
		}

		assertEquals(&quot;UNDEFINED&quot;, System.getProperty(&quot;KEY1&quot;, &quot;UNDEFINED&quot;));
		assertEquals(&quot;UNDEFINED&quot;, System.getProperty(&quot;KEY2&quot;, &quot;UNDEFINED&quot;));
		assertEquals(&quot;UNDEFINED&quot;, System.getProperty(&quot;KEY3&quot;, &quot;UNDEFINED&quot;));
	}

	@Test
	void clearsStandardPropertyContextually() throws Exception {
		String expectedJavaVersion = System.getProperty(&quot;java.version&quot;);
		try (SystemPropertiesContext testee = SystemPropertiesContext
				.of(entry(&quot;java.version&quot;, null))) {
			assertEquals(&quot;UNDEFINED&quot;, System.getProperty(&quot;java.version&quot;, &quot;UNDEFINED&quot;));
		}

		assertEquals(expectedJavaVersion, System.getProperty(&quot;java.version&quot;));
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking beyond the Java universe can be inspiring and broaden your thinking by
giving you new ideas to build better abstractions. So, I believe it&amp;#8217;s always
worth to study other programming languages and ecosystems, even if not
interested in leaving the professional Java development space.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/fintechexplained/advanced-python-what-are-magic-methods-d21891cf9a08&quot;&gt;
Advanced Python: What Are Magic Methods?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://martinheinz.dev/blog/34&quot;&gt;The Magic of Python Context Managers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Distroless? Distroless!</title>
      <link>http://www.jbake.org/blog_2021/distroless-distroless.html</link>
      <pubDate>Wed, 2 Jun 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/distroless-distroless.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_distroless&quot;&gt;What is Distroless?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re looking around for an appropriate base image to package your
application, you may stumble into the term &lt;em&gt;distroless&lt;/em&gt; image. This term was
coined by Google, which describes it as&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Distroless images contain only your application and its runtime dependencies.
They do not contain package managers, shells or any other programs you would
expect to find in a standard Linux distribution.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Google
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The described approach is best practice and basically means to restrict what&amp;#8217;s
going into your runtime container to precisely what&amp;#8217;s necessary for the
application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although, &lt;em&gt;distroless&lt;/em&gt; images are rather a general principal, Google is still
the major supplier of such images. Google provides images for different
languages like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript/NodeJS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Golang&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Technically, the &lt;em&gt;distroless&lt;/em&gt; base images contain mainly the language platform
components, i.e. in case of Java the JDK. Because the JDK is dynamically linked
to system libraries like GlibC, these libraries are also contained in the
image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The list of supported languages even includes Go. This may be surprising
a little bit at the first glance, because Go applications are usually
linked statically and can be packaged into images &lt;code&gt;FROM SCRATCH&lt;/code&gt;, i.e. into an
entirely empty image. Actually, the &lt;em&gt;distroless&lt;/em&gt; base image just contains
some small pieces like a truststore of CA root certificates and does not
increase the size of the image notably.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sample_application&quot;&gt;Sample Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before discussing the benefits of applications packaged with &lt;em&gt;distroless&lt;/em&gt;
images, let&amp;#8217;s have a look at the containerization of a sample Java application.
I&amp;#8217;ll use the
&lt;a href=&quot;https://guntherrotsch.github.io/blog_2021/wildfly-bootable-jar-starter.html&quot;&gt;
Jakarta MVC demo application&lt;/a&gt; of one of the last Blog posts, which
is packaged as Wildfly Bootable JAR, i.e. as a Single Fat Jar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following &lt;code&gt;Dockerfile&lt;/code&gt; just copies the application&amp;#8217;s Jar file into the image,
which is based on Google&amp;#8217;s &lt;em&gt;distroless&lt;/em&gt; image for Java 11:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;FROM gcr.io/distroless/java:11

COPY target/mvc-demo-bootable.jar /app/main.jar
WORKDIR /app
CMD [&quot;main.jar&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the &lt;code&gt;java&lt;/code&gt; command is defined as entrypoint of the image, the
application&amp;#8217;s Jar can be provided as command.
The regular &lt;code&gt;docker build&lt;/code&gt; command creates the image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ docker build -t mvc-app .
Sending build context to Docker daemon  204.7MB
Step 1/4 : FROM gcr.io/distroless/java:11
 ---&amp;gt; 6395a77cb03c
Step 2/4 : COPY target/mvc-demo-bootable.jar /app/main.jar
 ---&amp;gt; 2209115d4185
Step 3/4 : WORKDIR /app
 ---&amp;gt; Running in 5faa7537ec9b
Removing intermediate container 5faa7537ec9b
 ---&amp;gt; a81720f1f285
Step 4/4 : CMD [&quot;main.jar&quot;]
 ---&amp;gt; Running in 944c9a473721
Removing intermediate container 944c9a473721
 ---&amp;gt; d21a6c599d58
Successfully built d21a6c599d58
Successfully tagged mvc-app:latest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This containerized application can be executed on Linux by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ docker run --sysctl net.ipv4.ip_forward=1 --network=host -p 8080:8080 --rm -it mvc-app:latest
WARNING: Published ports are discarded when using host network mode
05:26:38,437 INFO  [org.wildfly.jar] (main) WFLYJAR0007: Installed server and application in /tmp/wildfly-bootable-server5397933122926229342, took 932ms
05:26:38,684 INFO  [org.wildfly.jar] (main) WFLYJAR0008: Server options: [--read-only-server-config=standalone.xml]
05:26:38,806 INFO  [org.jboss.msc] (main) JBoss MSC version 1.4.12.Final
05:26:38,814 INFO  [org.jboss.threads] (main) JBoss Threads version 2.4.0.Final
05:26:38,979 INFO  [org.jboss.as] (MSC service thread 1-3) WFLYSRV0049: WildFly Full 22.0.1.Final (WildFly Core 14.0.1.Final) starting
05:26:39,967 INFO  [org.jboss.as.jaxrs] (ServerService Thread Pool -- 15) WFLYRS0016: RESTEasy version 3.14.0.Final
05:26:39,988 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-6) WFLYUT0003: Undertow 2.2.4.Final starting
...
05:26:43,418 INFO  [org.jboss.as.server] (Controller Boot Thread) WFLYSRV0010: Deployed &quot;mvc-demo.war&quot; (runtime-name : &quot;ROOT.war&quot;)
05:26:43,449 INFO  [org.jboss.as.server] (Controller Boot Thread) WFLYSRV0212: Resuming server
05:26:43,451 INFO  [org.jboss.as] (Controller Boot Thread) WFLYSRV0025: WildFly Full 22.0.1.Final (WildFly Core 14.0.1.Final) started in 4761ms - Started 144 of 149 services (23 services are lazy, passive or on-demand)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beside the simple and straightforward image build, the generated images are
surprisingly small compared to Java application images built on top of
distribution based images:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ docker images
REPOSITORY           TAG              IMAGE ID            CREATED             SIZE
mvc-app              latest           d21a6c599d58        4 minutes ago       265MB
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From my experience, the size of application images based on a Linux distribution
is about 200 MB larger - the only exception of this are Alpine Linux based
images, but these have other drawbacks&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_distroless&quot;&gt;Why Distroless?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Distroless&lt;/em&gt; best resembles the origins of application containers, i.e. packaging
applications with its required runtime components in order to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;isolate applications in the best possible way&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow resource management like CPU and memory quotas on a per application basis&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the same time it refutes the widespread misconception that containers are
a replacement for VMs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main attribute of &lt;em&gt;distroless&lt;/em&gt; image applications is their small size.
And size actually matters because of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Performance&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Images are copied, transmitted and launched by fleet managers like Kubernetes.
In addition, fitting more containers into one machine means less machine spawns.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Security&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Improved security by minimizing the attack surface, because everything in your
container, e.g. shells, not used by your application can still be used by
attackers.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Money&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Fitting more containers into one machine (AKA worker node in Kubernetes) reduces
the bill from your cloud provider.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are situations, in which a shell access to an application&amp;#8217;s container may
be convenient. For such situations Google offers a debug version of their
&lt;em&gt;distroless&lt;/em&gt; containers, which includes a &lt;code&gt;busybox&lt;/code&gt; in addition. But usually
containerized applications should go without a shell. This may be not possible
for legacy applications brought to the cloud applying a &lt;code&gt;Lift-and-Shift&lt;/code&gt;
approach. But cloud-native applications should be designed and implemented in
a way, that shells and other components of a Linux distribution are not required.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/distroless&quot;&gt;Google Container Tools - Distroless&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/mvc-demo&quot;&gt;MVC Demo Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.wildfly.org/bootablejar/&quot;&gt;WildFly Bootable JAR Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Wildfly Bootable JAR and Static Content</title>
      <link>http://www.jbake.org/blog_2021/wildfly-bootable-static-content.html</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/wildfly-bootable-static-content.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_welcome_page&quot;&gt;Welcome Page&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Users of JBoss/Wildfly know the welcome page, which is returned when navigating
to the application server&amp;#8217;s root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/JBoss_Welcome_Page.png&quot; alt=&quot;JBoss Welcome Page&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The shown page is actually static content hosted in the file
&lt;code&gt;$JBOSS_HOME/welcome-content/index.html&lt;/code&gt;. The last two lines displayed on the
page explain how to replace the content or get entirely rid of it. The
referenced configuration of the Undertow subsystem is part of the application
server&amp;#8217;s &lt;code&gt;standalone.xml&lt;/code&gt; (stripped down to the crucial parts):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;subsystem xmlns=&quot;urn:jboss:domain:undertow:3.0&quot;&amp;gt;
    &amp;lt;buffer-cache name=&quot;default&quot;/&amp;gt;
    &amp;lt;server name=&quot;default-server&quot;&amp;gt;
        &amp;lt;http-listener name=&quot;default&quot; redirect-socket=&quot;https&quot; socket-binding=&quot;http&quot;/&amp;gt;
        &amp;lt;host name=&quot;default-host&quot; alias=&quot;localhost&quot;&amp;gt;
            &amp;lt;location name=&quot;/&quot; handler=&quot;welcome-content&quot;/&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            ...
        &amp;lt;/host&amp;gt;
    &amp;lt;/server&amp;gt;
    ...
    &amp;lt;handlers&amp;gt;
        &amp;lt;file name=&quot;welcome-content&quot; path=&quot;${jboss.home.dir}/welcome-content&quot;/&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        ...
    &amp;lt;/handlers&amp;gt;
    &amp;lt;filters&amp;gt;
        ...
    &amp;lt;/filters&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;name&lt;/code&gt; of the &lt;code&gt;location&lt;/code&gt; element defines the application server&amp;#8217;s context,
i.e. how users can reach the content.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The referenced &lt;code&gt;handler&lt;/code&gt; of type &lt;code&gt;file&lt;/code&gt; specifies where in the file system the
content is hosted.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After having a look at the configuration of the web container of Wildfly/JBoss,
nothing other is the Undertow subsystem, we go into the details of the packaging
as Bootable JAR.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_handler_configuration&quot;&gt;Handler Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wildfly Bootable JAR packaged applications (Single Fat JAR) are deployed to the
root context of the application server. Therefor there cannot be a welcome page
at the same location. But it&amp;#8217;s still possible to define static content handler
on a different (no-root) context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For demonstration purposes, the static content configuration has been added to
the
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/mvc-demo&quot;&gt;
Jakarta MVC Demo application&lt;/a&gt;. So, if you prefer to study a complete example,
then grab the linked repository (&lt;code&gt;code&lt;/code&gt; branch of Github repository of this
Blog project).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To demonstrate let&amp;#8217;s first define some content to be published. These files go
into the project&amp;#8217;s &lt;code&gt;extra-content&lt;/code&gt; directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;assets/img/file-system-tree.png&quot; alt=&quot;file system tree&quot; width=&quot;131&quot; height=&quot;98&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; contains just a simple &lt;em&gt;hello world&lt;/em&gt; page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;

  &amp;lt;title&amp;gt;Wildfly Web Content&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, the JBoss CLI to define the handler of static content is required.
The CLI scripts are hosted in &lt;code&gt;scripts/setup.cli&lt;/code&gt;  file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;/subsystem=undertow/configuration=handler/file=public-content:add(path=&quot;${jboss.home.dir}/web-root&quot;)
/subsystem=undertow/server=default-server/host=default-host/location=&quot;/public&quot;:add(handler=&quot;public-content&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, the location, from which users can fetch the static content, is
hosted below the &lt;code&gt;public&lt;/code&gt; context path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;extra-content&lt;/code&gt; and CLI scripts eventually need to be configured for the
Wildfly Bootable JAR packaging by the Maven plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Maven pom.xml:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;...
&amp;lt;build&amp;gt;
    ...
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.wildfly.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;wildfly-jar-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;feature-pack-location&amp;gt;wildfly@maven(org.jboss.universe:community-universe)#22.0.1.Final&amp;lt;/feature-pack-location&amp;gt;
                &amp;lt;layers&amp;gt;
                    &amp;lt;layer&amp;gt;web-server&amp;lt;/layer&amp;gt;
                    &amp;lt;layer&amp;gt;jaxrs&amp;lt;/layer&amp;gt;
                    &amp;lt;layer&amp;gt;management&amp;lt;/layer&amp;gt;
                &amp;lt;/layers&amp;gt;
                &amp;lt;excluded-layers&amp;gt;
                    &amp;lt;layer&amp;gt;deployment-scanner&amp;lt;/layer&amp;gt;
                &amp;lt;/excluded-layers&amp;gt;
                &amp;lt;cli-sessions&amp;gt;
                    &amp;lt;cli-session&amp;gt;
                        &amp;lt;script-files&amp;gt;
                            &amp;lt;script&amp;gt;scripts/setup.cli&amp;lt;/script&amp;gt;
                        &amp;lt;/script-files&amp;gt;
                        &amp;lt;resolve-expressions&amp;gt;true&amp;lt;/resolve-expressions&amp;gt;
                    &amp;lt;/cli-session&amp;gt;
                &amp;lt;/cli-sessions&amp;gt;
                &amp;lt;extra-server-content-dirs&amp;gt;
                    &amp;lt;extra-server-content-dir&amp;gt;extra-content&amp;lt;/extra-server-content-dir&amp;gt;
                &amp;lt;/extra-server-content-dirs&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;executions&amp;gt;
                &amp;lt;execution&amp;gt;
                    &amp;lt;goals&amp;gt;
                        &amp;lt;goal&amp;gt;package&amp;lt;/goal&amp;gt;
                    &amp;lt;/goals&amp;gt;
                &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to test the setup, submit the following commands in a terminal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;# build and execute the application
$ mvn clean package
...
$ java -jar target/mvc-demo-bootable.jar
...

# while application is running in another terminal
$ curl localhost:8080/public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;

  &amp;lt;title&amp;gt;Wildfly Web Content&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hollow_jar&quot;&gt;Hollow JAR&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hollow JAR packaged applications do not contain/provide the welcome page,
although the application is typically not deployed to the root context (except
the application&amp;#8217;s &lt;code&gt;&amp;lt;finalName&amp;gt;&lt;/code&gt; is equal to &lt;code&gt;ROOT&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get the application packaged as Hollow JAR, i.e. a Bootable JAR for the
plain vanilla application server and a WAR file containing the application, the
Maven plugin configuration of the Wildfly Bootable JAR need to be amended with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;lt;hollowJar&amp;gt;true&amp;lt;/hollowJar&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, the file handler is configured with the location &lt;code&gt;/&lt;/code&gt; as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;/subsystem=undertow/configuration=handler/file=public-content:add(path=&quot;${jboss.home.dir}/web-root&quot;)
/subsystem=undertow/server=default-server/host=default-host/location=&quot;/&quot;:add(handler=&quot;public-content&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user can now retrieve static content from the root context, just like the
pre-defined welcome page of the classical Wildfly application server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;# build and execute the application
$ mvn clean package
...
$ java -jar target/mvc-demo-bootable.jar --deployment=target/mvc-demo.war
...

# while application is running in another terminal
$ curl localhost:8080/index.html
# or just: $ curl localhost:8080
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp;gt;

  &amp;lt;title&amp;gt;Wildfly Web Content&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I already mentioned that the welcome page is not pre-configured for Bootable
JAR packages Wildfly applications, because the root context is usually
occupied by the application itself, at least for Single FAT JAR builds.
Another reason might be, that Wildfly Bootable JAR follows the philosophy
of creating a &lt;em&gt;just-enough-application-server&lt;/em&gt;, i.e. containing just the
features required by the application. If your application requires to serve
static content, you have to define accordingly. However, as shown in this
Blog Post, this is not a big deal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/mvc-demo&quot;&gt;MVC Demo Application&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.wildfly.org/bootablejar/&quot;&gt;WildFly Bootable JAR Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.wildfly.org/23/Bootable_Guide.html&quot;&gt;Wildfly Bootable JAR Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Jakarta MVC with FreeMarker</title>
      <link>http://www.jbake.org/blog_2021/jakarta-mvc-freemarker.html</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/jakarta-mvc-freemarker.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_jakarta_mvc&quot;&gt;Jakarta MVC&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Action-based frameworks like Spring MVC, Grails, Struts, or Ruby on Rails are
due their simplicity and ease of use very popular. The listed frameworks put the
HTTP request/response cycle into the center of interest and avoid unnecessary
abstractions. However, Jakarta EE (and its predecessor Java EE) provided only
the component-based JSF framework for a long time. Because of the high level
of abstractions JSF has a very steep learning curve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://jakarta.ee/specifications/mvc/&quot;&gt;Jakarta MVC specification&lt;/a&gt; describes
how MVC is built on top of JAXRS, which makes MVC easily accessible for
backend developers with JAXRS know how.
The &lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-krazo&quot;&gt;Eclipse Krazo Project&lt;/a&gt;
is the reference implementation of Jakarta MVC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because of the difficulties of the hand-over of Java EE from Oracle to the
Open Source Community, Jakarta MVC missed the release train of Jakarta EE 8.
Nevertheless, the reference implementation is compatible and available for
most popular Jakarta EE 8 compliant application servers. For the sample
project below I used Wildfly 22.0.1.Final packaged as Bootable Jar in
combination with Eclipse Krazo 1.1.
Anyhow, in Jakarta EE 9 the MVC standard is finally included.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mvc_view_engine&quot;&gt;MVC View Engine&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The template engine of the view component of Jakarta MVC can be freely chosen,
whereby standard-compliant MVC implementations must provide JSP and JSF as
view technology out of the box.  The two classes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.eclipse.krazo.engine.JspViewEngine&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.eclipse.krazo.engine.FaceletsViewEngine&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;are part of Eclipse Krazo and implement the view engines required by the
standard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the intended integration of
&lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;FreeMarker Java Template Engine&lt;/a&gt; it should
be possible, to define a controller like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@Path(&quot;hello&quot;)
@Controller
@RequestScoped
public class GreetController {

	private Models models;

	public GreetController() {
		// no-arg constructor required by CDI
	}

	@Inject
	public GreetController(Models models) {
		this.models = models;
	}

	@GET
	public Viewable greet(@QueryParam(&quot;name&quot;) String name) {
		models.put(&quot;visitor&quot;, name);
		return new Viewable(&quot;greeting.ftl&quot;);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The entire controller bean is pretty much standard, except that the template
of the returned &lt;code&gt;Viewable&lt;/code&gt; object points to a FreeMarker template. Given the
template file &lt;code&gt;greeting.ftl&lt;/code&gt; as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Welcome!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Hello, ${visitor}!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application should render as follows when visited by a user:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/JakartaMvcApp_Hello.png&quot; alt=&quot;Jakarta MVC sample application&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The visitor&amp;#8217;s name, which has been placed into the Jakarta MVC &lt;code&gt;Models&lt;/code&gt; object,
ends up in the processed FreeMarker template.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_freemarker_integration&quot;&gt;FreeMarker Integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In technical terms, view technologies are provided by implementing the interface
&lt;code&gt;javax.mvc.engine.ViewEngine&lt;/code&gt; - with Jakarta EE 9 the package name changes
to &lt;code&gt;jakarta.mvc.engine.ViewEngine&lt;/code&gt;. That means, that the integration of
FreeMarker template engine requires the implementation of the &lt;code&gt;ViewEngine&lt;/code&gt;
interface:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;@ApplicationScoped
@Priority(ViewEngine.PRIORITY_APPLICATION)
public class FreeMarkerViewEngine implements ViewEngine {

	// FreeMarker configuration is initialized lazily
	private volatile Configuration cfg;

	@Override
	public boolean supports(String view) {
		return view.endsWith(&quot;.ftl&quot;);
	}

	@Override
	public void processView(ViewEngineContext context) throws ViewEngineException {
		ensureInit(context);

		Models models = context.getModels();
		try {
			Template temp = cfg.getTemplate(context.getView());
			/* Merge data-model with template */
			Writer out = new OutputStreamWriter(context.getOutputStream());
			temp.process(models, out);
		} catch (IOException | TemplateException e) {
			throw new ViewEngineException(e);
		}
	}

	private void ensureInit(ViewEngineContext context) {
		if (cfg == null) {
			synchronized (FreeMarkerViewEngine.class) {
				if (cfg == null) {
					HttpServletRequest httpRequest = context.getRequest(HttpServletRequest.class);
					Map&amp;lt;String, Object&amp;gt; appConfig = context.getConfiguration().getProperties();
					Object viewFolderConfig = appConfig.get(ViewEngine.VIEW_FOLDER);
					String viewFolder = viewFolderConfig != null ? viewFolderConfig.toString() : DEFAULT_VIEW_FOLDER;

					// Create your Configuration instance, and specify if up to what FreeMarker
					// version (here 2.3.29) do you want to apply the fixes that are not 100%
					// backward-compatible. See the Configuration JavaDoc for details.
					cfg = new Configuration(Configuration.VERSION_2_3_29);

					// Specify the source where the template files come from. Here I set a
					// plain directory for it, but non-file-system sources are possible too:
					cfg.setServletContextForTemplateLoading(httpRequest.getServletContext(), viewFolder);

					// From here we will set the settings recommended for new projects. These
					// aren&apos;t the defaults for backward compatibility.

					// Set the preferred charset template files are stored in. UTF-8 is
					// a good choice in most applications:
					cfg.setDefaultEncoding(&quot;UTF-8&quot;);

					// Sets how errors will appear.
					// During web page *development* TemplateExceptionHandler.HTML_DEBUG_HANDLER is
					// better.
					cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);

					// Don&apos;t log exceptions inside FreeMarker that it will thrown at you anyway:
					cfg.setLogTemplateExceptions(false);

					// Wrap unchecked exceptions thrown during template processing into
					// TemplateException-s:
					cfg.setWrapUncheckedExceptions(true);

					// Do not fall back to higher scopes when reading a null loop variable:
					cfg.setFallbackOnNullLoopVariable(false);
				}
			}
		}
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because view engines are CDI beans, &lt;code&gt;FreeMarkerViewEngine&lt;/code&gt; is automatically
picked up by Jakarta MVC as candidate for rendering views. Whether this engine
is requested to render views at runtime is a matter of the priority (annotation)
and the result of the &lt;code&gt;supports(String view)&lt;/code&gt; method call. The standard explains
the the selection mechanism in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration of the FreeMarker template engine defines the location to
load templates, which requires the Servlet context. Because the Servlet context
becomes available with an HTTP request, the lazy initialization of FreeMarker&amp;#8217;s
&lt;code&gt;Configuration&lt;/code&gt; is delayed till the first rendering request arrives. The lazy
initialization also makes synchronization and the application of the
double-checked locking pattern necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
FreeMarker&amp;#8217;s &lt;code&gt;Configuration&lt;/code&gt; is thread-safe after the last configuration setting
is done.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When stripping off the setup and configuration of the template engine, the
actual integration into Jakarta MVC boils down to the lines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;   Writer out = new OutputStreamWriter(context.getOutputStream());
   temp.process(models, out);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beside the stream output writer, which eventually wraps the output stream
of the HTTP request, the MVC model mappings need to be adapted to the
template engine. Because MVC &lt;code&gt;Models&lt;/code&gt; implements Java&amp;#8217;s &lt;code&gt;Map&lt;/code&gt; interface, this
object can be passed directly as model object into the FreeMarker template
engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo project shows the ease of use of the Jakarta MVC view technology and
the simplicity of integrating different template engines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jakarta.ee/specifications/mvc/&quot;&gt;Jakarta MVC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-krazo&quot;&gt;Eclipse Krazo -
Jakarta MVC Reference Implementation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://freemarker.apache.org/&quot;&gt;FreeMarker Java Template Engine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Wildfly Bootable JAR Starter</title>
      <link>http://www.jbake.org/blog_2021/wildfly-bootable-jar-starter.html</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/wildfly-bootable-jar-starter.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_microprofile_starter&quot;&gt;Microprofile Starter&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://start.microprofile.io/&quot;&gt;Microprofile Starter Page&lt;/a&gt; lists Wildfly as
supported runtime:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/Microprofile_Starter.png&quot; alt=&quot;Microprofile Starter Page&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After extracting the downloaded project package, you&amp;#8217;ll happily notice that a
Wildfly Bootable JAR project is setup. The configured Galleon layers are
configured according to the selected MP specifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The setup project can already be build by &lt;code&gt;mvn package&lt;/code&gt; and the application
executed. Although, you&amp;#8217;re ready to add the business logic to your application,
I recommend to upgrade the Wildfly Bootable JAR plugin and the Wildfly
application server, both are not up to date in the &lt;em&gt;MicroProfile Starter&lt;/em&gt; setup.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_upgrade_wildfly_bootable_jar_plugin&quot;&gt;Upgrade Wildfly Bootable Jar Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Maven plugin is defined in the &lt;code&gt;&amp;lt;build&amp;gt;&lt;/code&gt; section of the project&amp;#8217;s POM,
apparently. You&amp;#8217;ll find the latest plugin on
&lt;a href=&quot;https://search.maven.org/artifact/org.wildfly.plugins/wildfly-jar-maven-plugin&quot;&gt;
Maven Central&lt;/a&gt;. At the time of writing the latest released version is
&lt;code&gt;4.0.1.Final&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_upgrade_wildfly_application_server&quot;&gt;Upgrade Wildfly Application Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The version of the Wildfly application server is also defined in the project&amp;#8217;s
POM. In this case the &lt;code&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; section contains the configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;properties&amp;gt;
  &amp;lt;maven.compiler.target&amp;gt;11&amp;lt;/maven.compiler.target&amp;gt;
  &amp;lt;version.wildfly&amp;gt;22.0.1.Final&amp;lt;/version.wildfly&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  &amp;lt;failOnMissingWebXml&amp;gt;false&amp;lt;/failOnMissingWebXml&amp;gt;
  &amp;lt;maven.compiler.source&amp;gt;11&amp;lt;/maven.compiler.source&amp;gt;
  &amp;lt;final.name&amp;gt;wildfly-starter&amp;lt;/final.name&amp;gt;
&amp;lt;/properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The version of the Wildfly application server.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The available versions are listed on the
&lt;a href=&quot;https://www.wildfly.org/downloads/&quot;&gt;Wildfly Download Page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_development&quot;&gt;Development&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command &lt;code&gt;mvn clean package&lt;/code&gt; builds the application. By submitting the
command &lt;code&gt;java -jar target/wildfly-starter-bootable.jar&lt;/code&gt; the application
can be started from the command line. The application server logs to the
console. In order to test the application, &lt;code&gt;cURL&lt;/code&gt; can be used in another
shell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ curl localhost:8080/data/hello -v
*   Trying 127.0.0.1:8080...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8080 (#0)
&amp;gt; GET /data/hello HTTP/1.1
&amp;gt; Host: localhost:8080
&amp;gt; User-Agent: curl/7.68.0
&amp;gt; Accept: */*
&amp;gt;
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Connection: keep-alive
&amp;lt; Content-Type: application/octet-stream
&amp;lt; Content-Length: 11
&amp;lt; Date: Sun, 21 Mar 2021 15:57:06 GMT
&amp;lt;
* Connection #0 to host localhost left intact
Hello World&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it, very easy and straight forward. Happy MicroProfiling with Wildfly
Bootable JAR&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.wildfly.org/bootablejar/&quot;&gt;WildFly Bootable JAR Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://start.microprofile.io/&quot;&gt;Microprofile Starter Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wildfly.org/downloads/&quot;&gt;Wildfly Download Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>JAX/RS Multipart Server</title>
      <link>http://www.jbake.org/blog_2021/jaxrs-multipart-server.html</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/jaxrs-multipart-server.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the recent Blog post
&lt;a href=&quot;https://guntherrotsch.github.io/blog_2021/jaxrs-multipart-client.html&quot;&gt;JAXR
Multipart Client&lt;/a&gt; I had a look on multipart form-data messages from the
perspective of a client. The situation on the server-side is not less difficult.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One might say, that multipart form-data messages are usually used in web
applications while JAXRS targets to implement APIs - that might also be the
reasoning behind leaving multipart messages out of the JAXRS standard. But
you&amp;#8217;ll likely find multipart form-data messages in APIs when it comes to file
uploads. Furthermore, the coming Jakarta EE 9 standard includes MVC, an action
based web application framework, which is build on top of JAXRS. In the context
of MVC I&amp;#8217;d expect multipart form-data messages as typical use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several options to process multipart form-data messages by a JAXRS
server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_proprietary_solutions&quot;&gt;Proprietary Solutions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, if the standard does not cover a generally used feature, proprietary
solutions are present. Every supplier of a JAXRS implemention provides support
of multipart messages. For example JBoss comes with
&lt;a href=&quot;https://docs.jboss.org/resteasy/docs/4.6.0.Final/userguide/html/Multipart.html&quot;&gt;
RestEasy Multipart Providers&lt;/a&gt;. The API looks simple and straight-forward:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@POST
@Consumes(&quot;multipart/form-data&quot;)
public Response postForm(MultipartFormDataInput input) {
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The RestEasy &lt;code&gt;Provider&lt;/code&gt; for &lt;code&gt;multipart/form-data&lt;/code&gt; messages takes care of the
de-marshalling of the HTTP message body and converts them to the Java object
&lt;code&gt;MultipartFormDataInput&lt;/code&gt; representation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, as always, proprietary solutions defeat the most valuable benefit of
standards like JAXRS, which is portability. But there are other options to
process multipart messages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_servlet_api&quot;&gt;Servlet API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Servlet API supports the processing of multipart messages since version 3.0.
Because Servlet requests can be injected into JAXRS resources as context
objects, the integration of the APIs is very easy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@POST
@Consumes(&quot;multipart/form-data&quot;)
public Response formPost(@Context javax.servlet.http.HttpServletRequest request) {
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Calling the &lt;code&gt;getParts&lt;/code&gt; method on the injected &lt;code&gt;request&lt;/code&gt; object returns a
collection of &lt;code&gt;javax.servlet.http.Part&lt;/code&gt; objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t want to go into any detail of such an implementation, but the Blog post
&lt;a href=&quot;https://nofluffjuststuff.com/blog/jason_lee1/2014/05/file_uploads_with_jax_rs_2&quot;&gt;
File Uploads with JAX-RS 2 by Jason Lee&lt;/a&gt; describes a sample implementation of
this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the Servlet API is rather low-level compared to JAXRS, more application
code is typically required. Nevertheless, because of the standard compliance
and the plus of portability, I&amp;#8217;d prefer the Servlet API approach over
proprietary solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_jaxrs_solution&quot;&gt;JAXRS Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re read my Blog post
&lt;a href=&quot;https://guntherrotsch.github.io/blog_2021/jaxrs-multipart-client.html&quot;&gt;JAXR
Multipart Client&lt;/a&gt;, you might remember the custom &lt;code&gt;MessageBodyWriter&lt;/code&gt; approach
presented there. Analogous, we could implement a &lt;code&gt;MessageBodyReader&lt;/code&gt; on the
server-side. The JAXRS resource would as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@POST
@Consumes(&quot;multipart/form-data&quot;)
public Response postFormData(MultiPartMessage message) {
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Objects of type &lt;code&gt;MultiPartMessage&lt;/code&gt; are Pojos representing multipart messages,
the same as used on the client-side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because parsing multipart messages is more difficult than creating them, the
implementation of &lt;code&gt;MultiPartMessageBodyReader&lt;/code&gt; is more challenging than the
&lt;code&gt;MultiPartMessageBodyWriter&lt;/code&gt; of the client has been.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I won&amp;#8217;t list the entire implementation here, but give you enough information
understand the code, you&amp;#8217;ll find in the &lt;code&gt;portable-server&lt;/code&gt; module of the
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/jaxrs-multipart&quot;&gt;
Multipart/Form-Data Project&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_multipartmessagebodyreader_class&quot;&gt;MultiPartMessageBodyReader Class&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;MessageBodyReader&lt;/code&gt; is the entry point of JAXRS integration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Provider
@Consumes(&quot;multipart/form-data&quot;)
public class MultiPartMessageBodyReader implements MessageBodyReader&amp;lt;MultiPartMessage&amp;gt; {

	private static final Logger LOGGER = LoggerFactory.getLogger(MultiPartMessageBodyReader.class);

	@Override
	public boolean isReadable(Class&amp;lt;?&amp;gt; type, Type genericType, Annotation[] annotations, MediaType mediaType) {
		LOGGER.info(&quot;isReadable called with type: {} and mediaType: {}&quot;, type, mediaType);
		return MultiPartMessage.class.isAssignableFrom(type)
				&amp;amp;&amp;amp; mediaType.toString().toLowerCase().startsWith(&quot;multipart/form-data&quot;);
	}

	@Override
	public MultiPartMessage readFrom(Class&amp;lt;MultiPartMessage&amp;gt; type, Type genericType, Annotation[] annotations,
			MediaType mediaType, MultivaluedMap&amp;lt;String, String&amp;gt; httpHeaders, InputStream entityStream)
            throws IOException, WebApplicationException {
        ...
    }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@Provider&lt;/code&gt; annotation declares the class to JAXRS, which calls this reader
when the de-marshalling of messages of content type &lt;code&gt;multipart/from-data&lt;/code&gt; is
required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The challenging task of the &lt;code&gt;readFrom&lt;/code&gt; method is the parsing of the
message given as input stream. While the &lt;code&gt;MultiPartMessageBodyReader&lt;/code&gt; parses
individual parts, the separating of the parts of the input stream is delegated
to the &lt;code&gt;PartInputStream&lt;/code&gt;. The following diagram show the principle behind:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/Multipart_Message_Parsing.png&quot; alt=&quot;Multi-part Message Input Streams&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;InputStream&lt;/code&gt; is wrapped by a &lt;code&gt;PartInputStream&lt;/code&gt;, which returns bytes until
the boundary is reached. The &lt;code&gt;InputStream&lt;/code&gt; can then be wrapped by another
&lt;code&gt;PartInputStream&lt;/code&gt;, which returns the end-of-file indicator when the next
boundary is reached. This goes on till all parts are consumed from the
input stream.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_partinputstream_class&quot;&gt;PartInputStream Class&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before going into the nifty details of the implementation of the boundary
detection, let&amp;#8217;s re-cap the structure of the messages, which look for example
like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;-----------------------------397924929223145234582961090009
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;duke.png&quot;
Content-Type: image/png&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;...binary content of PNG image...
-----------------------------397924929223145234582961090009
Content-Disposition: form-data; name=&quot;name&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Gunther
-----------------------------397924929223145234582961090009
Content-Disposition: form-data; name=&quot;age&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;55
-----------------------------397924929223145234582961090009--&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The parts of the message are delimited by the boundary string. Also note,
that the content can (partially) be binary. You&amp;#8217;ll find the details of
message format in RFC 7578 &lt;a href=&quot;https://tools.ietf.org/html/rfc7578&quot;&gt;Returning Values from Forms:
multipart/form-data&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To detect the boundary, but not consume bytes if some message content looks
like the beginning of the boundary, a kind of read-ahead is required. The
simplest way to implement such a read-ahead is to use the methods
&lt;code&gt;InputStream#mark&lt;/code&gt; and &lt;code&gt;InputStream#reset&lt;/code&gt;. Therefor, the input stream is
wrapped into a &lt;code&gt;BufferedInputStream&lt;/code&gt; on demand:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;if (!entityStream.markSupported()) {
    LOGGER.debug(&quot;Wrap entity input stream to buffered input stream to support mark and reset operations.&quot;);
    return new BufferedInputStream(inputStream);
} else {
    return inputStream;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The boundary detection in the method &lt;code&gt;PartInputStream#read&lt;/code&gt; relies on the
mark/reset mechanism which allows to read-ahead some content and rewind the
read position if required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, the &lt;code&gt;PartInputStream&lt;/code&gt; class contains the detection if the last
part has been reached.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation does actually have some complexity, but gives the best API
user experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When it comes to processing of multipart form-data messages by JAXRS
servers, it depends on the general condition of the project and the team,
which route to go. But because there are alternatives to the proprietary
solutions, I&amp;#8217;d in almost all cases avoid a non-portable approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the Servlet approach requires code of less complexity, the JAXRS solution
is more general and gives a nicer and simpler API for the application
developer. Both are viable solutions and choosing one of them is a matter
of project circumstances and may be taste.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/jaxrs-multipart&quot;&gt;
Source Code of Multipart/Form-Data Project&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/resteasy/docs/4.6.0.Final/userguide/html/Multipart.html&quot;&gt;
RestEasy Multipart Providers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nofluffjuststuff.com/blog/jason_lee1/2014/05/file_uploads_with_jax_rs_2&quot;&gt;
File Uploads with JAX-RS 2 by Jason Lee&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7578&quot;&gt;RFC 7578 - Returning Values from Forms:
multipart/form-data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>JAX/RS Multipart Client</title>
      <link>http://www.jbake.org/blog_2021/jaxrs-multipart-client.html</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/jaxrs-multipart-client.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JAXRS &lt;code&gt;Client&lt;/code&gt; class is a convenient way to consume REST APIs, because
marshalling and unmarshalling of Java objects from transfer formats like
JSON or XML is done automatically. But HTTP messages of content type
&lt;code&gt;multipart-form-data&lt;/code&gt; are not supported by the standard out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To overcome the deficiency of multipart messages often particular JAXRS
implementations like RestEasy or Jersey are applied. Those implementations
provide proprietary solutions for submitting HTTP multipart messages. But
the solutions also defeat the most valuable benefit of a standard like
JAXRS, which is portability. Therefor a standard compliant solution is
presented in the follows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_html_form&quot;&gt;HTML Form&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before diving into the details of the implementation, let&amp;#8217;s have a look into
the origins and anatomy of HTTP requests of content type &lt;code&gt;multipart/form-data&lt;/code&gt;.
Such HTTP requests are typically submitted by HTML forms like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;h2&amp;gt;File Upload Example&amp;lt;/h2&amp;gt;
&amp;lt;form action=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
       &amp;lt;p&amp;gt;Select a file : &amp;lt;input type=&quot;file&quot; name=&quot;file&quot; /&amp;gt;
       &amp;lt;p&amp;gt;Input your name: &amp;lt;input type=&quot;string&quot; name=&quot;name&quot; /&amp;gt;
       &amp;lt;p&amp;gt;Input your age: &amp;lt;input type=&quot;number&quot; name=&quot;age&quot; /&amp;gt;
       &amp;lt;p&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; cause the submission of the mentioned
content type. An alternative encoding is &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;,
which is appropriate only for text fields and cannot be used to transfer
binary files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above HTML document renders in a Browser without any styling to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/File_Upload_Form.png&quot; alt=&quot;File Upload Form&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_http_multipart_message&quot;&gt;HTTP Multipart Message&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On submission of a HTTP message the following content will be send to the
server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;-----------------------------397924929223145234582961090009
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;duke.png&quot;
Content-Type: image/png&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;...binary content of PNG image...
-----------------------------397924929223145234582961090009
Content-Disposition: form-data; name=&quot;name&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Gunther
-----------------------------397924929223145234582961090009
Content-Disposition: form-data; name=&quot;age&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;55
-----------------------------397924929223145234582961090009--&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The different parts, an uploaded file, a field named &lt;code&gt;name&lt;/code&gt; and a field
named &lt;code&gt;age&lt;/code&gt; are transmitted in three parts which are delimited by a so-called
boundary. The boundary can change from one request to the next.
The RFC 7578 &lt;a href=&quot;https://tools.ietf.org/html/rfc7578&quot;&gt;Returning Values from Forms:
multipart/form-data&lt;/a&gt; describes the details of the message type.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_jaxrs_client&quot;&gt;JAXRS Client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The standard JAXRS Client doesn&amp;#8217;t support multipart messages. However, when
we imagine a smooth integration of &lt;code&gt;multipart/form-data&lt;/code&gt; messages, we might
think of an API like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;Client client = ClientBuilder.newBuilder()
                             .register(MultipartMessageBodyWriter.class)
                             .build(); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

MultiPartMessage multiPartMessage = new MultiPartMessage(); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
multiPartMessage.addPart(FilePart.of(&quot;duke.png&quot;, new File(&quot;duke.png&quot;))); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
multiPartMessage.addPart(FieldPart.of(&quot;name&quot;, &quot;Gunther&quot;)); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
multiPartMessage.addPart(FieldPart.of(&quot;age&quot;, &quot;55&quot;));
LOGGER.info(&quot;Posting form data as multi-part message: {}&quot;, multiPartMessage);

try (Response response = &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        client.target(&quot;http://localhost:8080/form&quot;)
              .request()
              .post(Entity.entity(multiPartMessage, MULTIPART_FORM_DATA))) {

    LOGGER.info(&quot;Response on POST to Form-Data POST: {}&quot;, response.getStatusInfo());
    if (response.getStatus() != HttpStatus.SC_NO_CONTENT) {
        LOGGER.info(&quot;Response Body: {}&quot;, response.readEntity(String.class));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;On the creation of the JAXRS Client a &lt;code&gt;Provider&lt;/code&gt; to write mutlipart
messages is registerd.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Instances of the class &lt;code&gt;MultiPartMessage&lt;/code&gt; represent the form data, which
is going to transmitted as HTTP message of &lt;code&gt;multipart/form-data&lt;/code&gt; content type.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A &lt;code&gt;FilePart&lt;/code&gt; which represents a file to be uploaded is added to the
multipart message.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Field parts are added to the message.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Posting the request sends the multipart message to the server. The
&lt;code&gt;MUTLIPART_FORM_DATA&lt;/code&gt; media type of the entity triggers the &lt;code&gt;Provider&lt;/code&gt;
registered on creation of the &lt;code&gt;Client&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The API looks simple and straight forward to use. While the &lt;code&gt;MultiPartMessage&lt;/code&gt;,
&lt;code&gt;FilePart&lt;/code&gt; and &lt;code&gt;FieldPart&lt;/code&gt; are simple model classes representing the message
data, the crucial encoding logic is implemented by the JAXRS provider class,
the custom &lt;code&gt;MessageBodyWriter&lt;/code&gt; for multipart messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_api_model_classes&quot;&gt;API Model Classes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The model classes represent the form data in a straight forward way. The
multipart message is basically a list of parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class MultiPartMessage {

	private List&amp;lt;Part&amp;gt; parts = new ArrayList&amp;lt;&amp;gt;();

	public void addPart(Part part) {
		parts.add(part);
	}

	public List&amp;lt;Part&amp;gt; getParts() {
		return new ArrayList&amp;lt;&amp;gt;(parts);
	}

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The different kinds of message parts implement the following &lt;code&gt;Part&lt;/code&gt; interface:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public interface Part {

	List&amp;lt;String&amp;gt; getContentHeaders();

	Supplier&amp;lt;InputStream&amp;gt; getContentStream();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This interface ensures that the different kinds of parts (field or file) can
be processed by the &lt;code&gt;MessageBodyWriter&lt;/code&gt; in a uniform way, i.e. the parts
implement polymorphic message encoding logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The part implementation classes for fields and files look slightly simplified
like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class FieldPart implements Part {

	private String name;
	private String value;

	public FieldPart(String name, String value) {
		this.name = name;
		this.value = value;
	}

	@Override
	public List&amp;lt;String&amp;gt; getContentHeaders() {
		return Arrays.asList(new String[] { &quot;Content-Disposition: form-data; name=\&quot;&quot; + name + &quot;\&quot;&quot; });
	}

	@Override
	public Supplier&amp;lt;InputStream&amp;gt; getContentStream() {
		return () -&amp;gt; new ByteArrayInputStream(value.getBytes(StandardCharsets.UTF_8));
	}

    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class FilePart implements Part {

	private static final Logger LOGGER = LoggerFactory.getLogger(FilePart.class);

	private String name;
	private File file;

	public FilePart(String name, File file) {
		this.name = name;
		this.file = file;
	}

	@Override
	public List&amp;lt;String&amp;gt; getContentHeaders() {
		String contentDisposition = &quot;Content-Disposition: form-data; name=\&quot;&quot; + name + &quot;\&quot;; filename=\&quot;&quot;
				+ file.getName() + &quot;\&quot;&quot;;
		String contentType = &quot;Content-Type: &quot; + getMimeType().orElse(&quot;application/octet-stream&quot;);

		return Arrays.asList(new String[] { contentDisposition, contentType });
	}

	private Optional&amp;lt;String&amp;gt; getMimeType() {
		String mimeType = null;
		try {
			mimeType = Files.probeContentType(file.toPath());
		} catch (IOException e) {
			LOGGER.warn(&quot;Exception while probing content type of file: {}, exception: {}&quot;, file, e);
		}
		if (mimeType == null) {
			mimeType = URLConnection.guessContentTypeFromName(file.getName());
		}
		return Optional.ofNullable(mimeType);
	}

	@Override
	public Supplier&amp;lt;InputStream&amp;gt; getContentStream() {
		return () -&amp;gt; createInputStreamFromFile();
	}

	private FileInputStream createInputStreamFromFile() {
		try {
			return new FileInputStream(file);
		} catch (FileNotFoundException e) {
			throw new RuntimeException(e);
		}
	}
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, it&amp;#8217;s becomes clear why the &lt;code&gt;Part#getContentStream&lt;/code&gt; method operates with
streams: That way the field parts as well as the file parts can be efficiently
retrieved and transferred to the message body. In addition, there&amp;#8217;s no need
to read the entire file into memory during message encoding. The reason for
the &lt;code&gt;Supplier&lt;/code&gt; of input stream is that the message body writer will then open
and close the stream, which can (and  should) placed into a try-resource block
to avoid resource leaking:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class MultipartMessageBodyWriter implements MessageBodyWriter&amp;lt;MultiPartMessage&amp;gt; {

	private static final Logger LOGGER = LoggerFactory.getLogger(MultipartMessageBodyWriter.class);

	private static final String HTTP_LINE_DELIMITER = &quot;\r\n&quot;;

	@Override
	public boolean isWriteable(Class&amp;lt;?&amp;gt; type, Type genericType, Annotation[] annotations, MediaType mediaType) {
		return MultiPartMessage.class.isAssignableFrom(type) &amp;amp;&amp;amp; MULTIPART_FORM_DATA_TYPE.equals(mediaType);
	}

	@Override
	public void writeTo(MultiPartMessage t, Class&amp;lt;?&amp;gt; type, Type genericType, Annotation[] annotations,
			MediaType mediaType, MultivaluedMap&amp;lt;String, Object&amp;gt; httpHeaders, OutputStream entityStream)
			throws IOException, WebApplicationException {

		String boundary = &quot;-----------&quot; + UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);
		LOGGER.debug(&quot;Boundary: {}&quot;, boundary);

		List&amp;lt;Object&amp;gt; contentTypeHeader = new ArrayList&amp;lt;&amp;gt;();
		contentTypeHeader.add(MediaType.MULTIPART_FORM_DATA + &quot;; boundary=\&quot;&quot; + boundary + &quot;\&quot;&quot;);
		httpHeaders.put(&quot;Content-type&quot;, contentTypeHeader);

		for (Part part : t.getParts()) {
			writePart(boundary, entityStream, part);
			LOGGER.debug(&quot;Part written: {}&quot;, part);
		}
		String endBoundary = &quot;--&quot; + boundary + &quot;--&quot; + HTTP_LINE_DELIMITER;
		print(entityStream, endBoundary);
	}

	private void writePart(String boundary, OutputStream entityStream, Part part) throws IOException {
		String startBoundary = &quot;--&quot; + boundary + HTTP_LINE_DELIMITER;

		print(entityStream, startBoundary);
		for (String contentHeader : part.getContentHeaders()) {
			print(entityStream, contentHeader + HTTP_LINE_DELIMITER);
		}
		print(entityStream, HTTP_LINE_DELIMITER);

		try (InputStream contentStream = part.getContentStream().get()) {
			contentStream.transferTo(entityStream);
		}
		print(entityStream, HTTP_LINE_DELIMITER);
	}

	private void print(OutputStream stream, String str) throws IOException {
		stream.write(str.getBytes(StandardCharsets.US_ASCII));
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That are the major classes of a standard compliant solution to submit messages
of content type &lt;code&gt;multipart/form-data&lt;/code&gt; to a server. You can find the
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/jaxrs-multipart/client&quot;&gt;
source code&lt;/a&gt; of the Multipart/Form-Data support on Github.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As demonstrated, it&amp;#8217;s not to difficult to consume multipart form endpoint of a
REST API using a standard JAXRS client. The workaround of proprietary solutions
based on RestEasy or Jersey can easily avoided. Actually, I don&amp;#8217;t understand
why the JAXRS standard does not fully support the processing of multipart
messages&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/jaxrs-multipart/client&quot;&gt;
Source Code of Multipart/Form-Data Client Support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7578&quot;&gt;RFC 7578 - Returning Values from Forms:
multipart/form-data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/resteasy/docs/4.6.0.Final/userguide/html/RESTEasy_Client_Framework.html&quot;&gt;RestEasy Client API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://eclipse-ee4j.github.io/jersey.github.io/documentation/latest/client.html&quot;&gt;Jersey Client API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Wildfly Bootable JAR</title>
      <link>http://www.jbake.org/blog_2021/wildfly-bootable-jar.html</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/wildfly-bootable-jar.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wildfly does not even implement the Jakarta EE standard, but also supports
Eclipse Microprofile, which benefits developments for the cloud. In the last
months the project also introduced a way to package a WildFly application as a
bootable JAR (also known as a &quot;fat JAR&quot;). Bootable JAR packaging is well suited
for microservices to be run on cloud and bare metal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The packaging as single JAR allows to create a &lt;em&gt;just enough&lt;/em&gt; application
server, that contains only the features required by the application. This
server is then bundled together with the application into a single JAR.
The &lt;a href=&quot;https://docs.wildfly.org/galleon/&quot;&gt;Galleon&lt;/a&gt; technology with server trimming
capabilities have made a bootable JAR for WildFly a valid solution.
WildFly defines a set of Galleon layers that can be combined to tailor the
server to your application needs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_maven_plugin_setup&quot;&gt;Maven Plugin Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Wildfly JAR Maven Plugin is the easiest way to apply the new technology.
A basic configuration for a simple REST API server of the plugin combines
the predefined Wildfly layers &lt;code&gt;jaxrs&lt;/code&gt; and &lt;code&gt;management&lt;/code&gt; for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;build&amp;gt;
    ...
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.wildfly.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;wildfly-jar-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;feature-pack-location&amp;gt;wildfly@maven(org.jboss.universe:community-universe)#${version.server.bom}&amp;lt;/feature-pack-location&amp;gt;
                &amp;lt;layers&amp;gt;
                    &amp;lt;layer&amp;gt;jaxrs&amp;lt;/layer&amp;gt;
                    &amp;lt;layer&amp;gt;management&amp;lt;/layer&amp;gt;
                &amp;lt;/layers&amp;gt;
                &amp;lt;excluded-layers&amp;gt;
                    &amp;lt;layer&amp;gt;deployment-scanner&amp;lt;/layer&amp;gt;
                &amp;lt;/excluded-layers&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;executions&amp;gt;
                &amp;lt;execution&amp;gt;
                    &amp;lt;goals&amp;gt;
                        &amp;lt;goal&amp;gt;package&amp;lt;/goal&amp;gt;
                    &amp;lt;/goals&amp;gt;
                &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;feature-pack-location&lt;/code&gt; element defines where the feature can be fetched
from, in this case the plugin retrieves the features from a Maven repository.
But locations in local file system are also possible for custom features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a sample Maven project of a simple JAX/RS server on my
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/jaxrs-jar&quot;&gt;Github repository&lt;/a&gt;.
After starting the application submitting &lt;code&gt;mvn wildfly-jar:run&lt;/code&gt;, you can test
it from another shell with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ curl localhost:8080/hello
Hello from Wildfly JAR&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note, that the single Fat JAR deployment works without context path.
The application server&amp;#8217;s port &lt;code&gt;8080&lt;/code&gt; is the default. The bootable JAR created
by the plugin supports the main WildFly standalone server startup arguments,
e.g. for changing the server port.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Maven plugin offers a lot of functionality and options to configure the
packaged artifact, e.g.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Supports WildFly Galleon layers to create a use-case tailored bootable JAR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supports WildFly CLI script execution to fine tune your server during build
(configure security, logging, …​).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supports the ability to package extra content inside the bootable JAR
(e.g.: a keystore)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supports the creation of a &quot;hollow&quot; JAR (a JAR containing only the WildFly
server, the application to deploy being provided at runtime).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Offers a &quot;dev&quot; mode to speed-up development by skipping the bootable JAR
re-build.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Offers goals to start and shutdown a bootable JAR.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the feature are examined in the following.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_development_mode&quot;&gt;Development Mode&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to create a nice developer experience many frameworks and tools
nowadays provide a development mode of some kind, e.g. Quarkus allows to start
the application and supports &lt;em&gt;hot code replacement&lt;/em&gt; during development. The
development mode of the Wildfly JAR Plugin behaves almost the same. It can
be started with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn wildfly-jar:dev-watch

[INFO] Scanning for projects...
[INFO]
[INFO] -------------------&amp;lt; net.gunther.wildfly:jaxrs-jar &amp;gt;--------------------
[INFO] Building jaxrs-jar 1.0-SNAPSHOT
[INFO] --------------------------------[ war ]---------------------------------
[INFO]
[INFO] --- wildfly-jar-maven-plugin:3.0.2.Final:dev-watch (default-cli) @ jaxrs-jar ---
[INFO] Dev mode, adding layer management to ensure dev mode can be operated
[INFO] Provisioning server configuration based on the set of configured layers
[INFO] Building server based on [[wildfly@maven(org.jboss.universe:community-universe)#22.0.0.Final inherit-packages=false inheritConfigs=false]] galleon feature-packs
[INFO] Found boot artifact org.wildfly.core:wildfly-jar-boot:jar:14.0.0.Final:provided in wildfly-core@maven(org.jboss.universe:community-universe):current#14.0.0.Final
Jan 28, 2021 7:53:07 PM org.wildfly.core.embedded.LoggerContext$JBossLoggingModuleLogger greeting
INFO: JBoss Modules version 1.11.0.Final
Jan 28, 2021 7:53:07 PM org.jboss.msc.service.ServiceContainerImpl &amp;lt;clinit&amp;gt;
INFO: JBoss MSC version 1.4.12.Final
Jan 28, 2021 7:53:07 PM org.jboss.threads.Version &amp;lt;clinit&amp;gt;
INFO: JBoss Threads version 2.3.2.Final
Jan 28, 2021 7:53:07 PM org.jboss.as.server.ApplicationServerService start
INFO: WFLYSRV0049: WildFly Full 22.0.0.Final (WildFly Core 14.0.0.Final) starting
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a change of some sources is detected by the plugin, a re-deployment is
initiated. In that case you&amp;#8217;ll find logged output like the following on the
console:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;...
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to /home/gunther/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/jaxrs-jar/target/classes
[INFO] Exploding webapp
[INFO] Assembling webapp [jaxrs-jar] in [/home/gunther/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/jaxrs-jar/target/deployments/ROOT.war]
[INFO] Processing war project
[INFO] Webapp assembled in [5 msecs]
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The development mode creates a nice user experience, increases productivity and
can easily replace custom tools like
&lt;a href=&quot;https://github.com/AdamBien/wad&quot;&gt;&quot;Watch and Deploy&quot; by Adam Bien&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hollow_jar&quot;&gt;Hollow JAR&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Wildfly JAR Maven Plugin assembles, depending on its configuration,
different artifact packages. By default a single Fat JAR containing the
server features as well as the application classes is created. But for
containerized deployments it can be beneficial to separate the
server parts from the application. The idea behind is that the server
does not change very often, but during development the application classes do.
Keeping the server in an image layer and putting the application on top of
that in a separate layer, usually improves the performance of building the
application image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configuring the Wildfly JAR plugin to create a so-called Hollow JAR is as
easy as adding the following to the plugin configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;    &amp;lt;hollow-jar&amp;gt;true&amp;lt;/hollow-jar&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Hollow JAR configuration creates two artifacts, the server&amp;#8217;s Hollow JAR
and the application WAR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the application packaged as single Fat JAR can be started by&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ java -jar target/wildfly-bootable.jar&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the Hollow JAR application is started by&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ java -jar target/wildfly-bootable.jar --deployment=target/wildfly.war&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the case of the Hollow JAR the application is deployed with context path,
which need to be provided when testing the application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ curl localhost:8080/wildfly/hello
Hello from Wildfly JAR&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get rid of the context path when using Hollow JAR, the application need
to be provided as &lt;code&gt;ROOT.war&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_server_configuration&quot;&gt;Server Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Wildfly application server gets the configuration from a &lt;code&gt;standalone.xml&lt;/code&gt;
file in &lt;code&gt;$JBOSS_HOME/standalone/configuration&lt;/code&gt; directory. Manually modifying
this file was never a good idea (and in addition requires to stop the server).
If you&amp;#8217;ve worked (as recommended) with JBoss CLI scripts so far, then you
migration to Wildfly bootable JAR is pretty easy: The Wildfly JAR Maven
Plugin supports CLI scripts to be executed during the packaging of the JAR.
You just need to add references to CLI properties and script files to the
plugin&amp;#8217;s configuration. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;    &amp;lt;cli-sessions&amp;gt;
        &amp;lt;cli-session&amp;gt;
            &amp;lt;script-files&amp;gt;
                &amp;lt;script&amp;gt;scripts/logging.cli&amp;lt;/script&amp;gt;
            &amp;lt;/script-files&amp;gt;
            &amp;lt;properties-file&amp;gt;scripts/cli.properties&amp;lt;/properties-file&amp;gt;
            &amp;lt;resolve-expressions&amp;gt;true&amp;lt;/resolve-expressions&amp;gt;
        &amp;lt;/cli-session&amp;gt;
    &amp;lt;/cli-sessions&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CLI properties (&lt;code&gt;cli.properties&lt;/code&gt;) are for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;keystore.path=/etc/wf-secrets/keystore.jks
keystore.password=password
undertow.server=default-server
config.path=/etc/config
config.ordinal=200&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And CLI commands to configure the logging subsystem (&lt;code&gt;logging.cli&lt;/code&gt;)
are for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;/subsystem=logging/logger=net.gunther.wildfly.demo:add(level=ALL)
/subsystem=logging/json-formatter=json-formatter:add(exception-output-type=formatted, pretty-print=false, meta-data={version=&quot;1&quot;}, key-overrides={timestamp=&quot;@timestamp&quot;})
/subsystem=logging/console-handler=CONSOLE:write-attribute(name=level,value=ALL)
/subsystem=logging/console-handler=CONSOLE:write-attribute(name=named-formatter, value=json-formatter)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After re-building the application the messages are logged in JSON format:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;...
{&quot;@timestamp&quot;:&quot;2021-01-28T19:45:13.323+01:00&quot;,&quot;sequence&quot;:34,&quot;loggerClassName&quot;:&quot;org.slf4j.impl.Slf4jLogger&quot;,&quot;loggerName&quot;:&quot;net.gunther.wildfly.demo.app.HelloResource&quot;,&quot;level&quot;:&quot;DEBUG&quot;,&quot;message&quot;:&quot;GET HelloResource called.&quot;,&quot;threadName&quot;:&quot;default task-1&quot;,&quot;threadId&quot;:65,&quot;mdc&quot;:{},&quot;ndc&quot;:&quot;&quot;,&quot;hostName&quot;:&quot;gunther-k501uq&quot;,&quot;processName&quot;:&quot;wildfly-bootable.jar&quot;,&quot;processId&quot;:32887,&quot;version&quot;:&quot;1&quot;}
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Wildfly Bootable JAR offers a great option when you are on the course of
moving applications into the cloud. The fact that the entire ecosystem of the
Wildfly technology can be used (e.g. CLI configuration) in combination with
a packaging more appropriate for cloud deployments, makes it in particular
interesting for teams already working with Wildfly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.wildfly.org/bootablejar/&quot;&gt;WildFly Bootable JAR Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.wildfly.org/22/Bootable_Guide.html&quot;&gt;Wildfly Bootable JAR Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.wildfly.org/galleon/&quot;&gt;Galleon Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AdamBien/wad&quot;&gt;&quot;Watch and Deploy&quot; Tool by Adam Bien&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Dependency Injection Without Framework</title>
      <link>http://www.jbake.org/blog_2020/di-without-framework.html</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/di-without-framework.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_dependency_injection&quot;&gt;Dependency Injection&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency injection (DI) is a Software design principle that rules to provide
dependencies of a component (a.k.a. collaborators) independent of the
component&amp;#8217;s business logic, i.e. there&amp;#8217;s a clear separation of the concerns&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;business logic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;resolution of dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency Injection also means, that the component is not responsible for
the creation of components it depends on. Do get a better grip on these
theoretical considerations, let&amp;#8217;s look at some simplified sample code to
illustrate the principle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without dependency injection a component could be defined like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class Foo {

   private A a;
   private B b;

   public Foo() {
      this.a = new A();
   }

   public void bar() {
      C c = new C();
      c.doSomething();
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The component &lt;code&gt;Foo&lt;/code&gt; depends on the components &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;. These
depending components are created in the constructor respectively the (business)
method &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When introducing dependency injection the component&amp;#8217;s definition could look like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class Foo {

   private A a;
   private B b;
   private C c;

   public Foo(A a, B b, C c) {
      this.a = a;
      this.b = b;
      this.c = c;
   }

   public void bar() {
      c.doSomething();
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The constructor takes instances of its collaborators, the business logic just
relies on them. That separates behavior from dependency resolution. In simpler
words, it allows the developer to define classes with specific functionality
that depends on various collaborators, without having to define how reference
to these collaborator will be obtained. In that way, decoupling among the
various components is achieved and cleaner code is introduced in general.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency injection also fosters the testability of the components. In
particular, unit tests usually require that collaborators are mocked. With
dependency injection as shown above, the mocked collaborators can be handed
over to the constructor easily. In contrast, when the component creates its
collaborators and hard-codes the dependencies, it&amp;#8217;s nearly impossible to
develop unit tests for the component.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_relation_to_inversion_of_control&quot;&gt;Relation to Inversion of Control&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Often Dependency Injection (DI) and Inversion of Control (IoC) are named at
once. Are DI and IoC just a different name for the same thing? well, that&amp;#8217;s
not the case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IoC is a much broader concept, which says that the flow of control is reversed.
Frameworks designed according to IoC follows the &lt;em&gt;Hollywood Principle&lt;/em&gt;, which
is characterized by the statement &quot;Don&amp;#8217;t call us, we&amp;#8217;ll call you&quot;: Application
code does not call the framework (as it would when using libraries), but the
framework calls the application code appropriately. This design concept assists
in the development of code with high cohesion and low coupling that is easier
to debug, maintain and test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency injection is just a specific form of inversion of control where
the concern being inverted is the process of obtaining the needed dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_dependency_injection_frameworks&quot;&gt;Dependency Injection Frameworks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the introduction the mixing of software design principle and implementing
technology was mentioned. And it&amp;#8217;s true that Spring, Guice, CDI (to name
just the most prominent DI frameworks) are in widespread use in projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, every framework used by a project creates a dependency that might
make maintenance and migration of the developed application to another
platform harder. For that reason, for small projects it could be an option
to resign usage of a DI framework entirely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typical business applications follow a &lt;em&gt;Boundary-Control-Entity (BCE)&lt;/em&gt; design,
in which case the boundary layer receives requests. In short, the boundary
should host the assembling of all components that process the request. The
assembled/created components gets their dependencies injected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_types_of_dependency_injection&quot;&gt;Types of Dependency Injection&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Constructor injection as shown above is just one way to implement dependency
injection. Dependency injection frameworks usually offers various options to
inject dependencies, which are&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;constructor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;field&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setter&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;injection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which one to use is often subject of heated debates. But I recommend
constructor injection for several reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it&amp;#8217;s the most natural way to provide dependencies in a Java SE environment,
i.e. &lt;strong&gt;not&lt;/strong&gt; using a framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;required dependencies are communicated to the user of the component by
means of the Java language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it prevents collaborators from being left to &lt;code&gt;null&lt;/code&gt; and getting
&lt;code&gt;NullPointerException&lt;/code&gt; at runtime (see link below)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the number of arguments passed into the constructor signals if a component
depends on &lt;strong&gt;too many&lt;/strong&gt; collaborators (avoiding &quot;God&quot; classes) - can be easily
checked by Sonarqube or other static code analysis tool&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But, regardless which DI type you decide to use in your project, it&amp;#8217;s crucial
to design software with dependency injection in mind. The maintainer of your
software will appreciate it very much - please keep in mind that this could
be you :-).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.martinfowler.com/articles/injection.html&quot;&gt;Martin Fowler: Inversion
of Control Containers and the Dependency Injection pattern&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://olivergierke.de/2013/11/why-field-injection-is-evil/&quot;&gt;Oliver Gierke: Why
field injection is evil&lt;/a&gt;
​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Maven And The Classpath</title>
      <link>http://www.jbake.org/blog_2020/maven-classpath.html</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/maven-classpath.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_maven_dependency_plugin&quot;&gt;Maven Dependency Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have you ever wondered how the Maven setup classpath for test execution by
Surefire looks like?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start with an example. Given the sample project with the following
dependencies, we&amp;#8217;ll explore the setup of the classpath generated by Maven in
detail:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn dependency:tree
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; net.gunther.cli:json2yaml &amp;gt;----------------------
[INFO] Building json2yaml 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ json2yaml ---
[INFO] net.gunther.cli:json2yaml:jar:0.0.1-SNAPSHOT
[INFO] +- javax.json:javax.json-api:jar:1.1:compile
[INFO] +- org.glassfish:javax.json:jar:1.1:compile
[INFO] \- org.junit.jupiter:junit-jupiter:jar:5.7.0:test
[INFO]    +- org.junit.jupiter:junit-jupiter-api:jar:5.7.0:test
[INFO]    |  +- org.apiguardian:apiguardian-api:jar:1.1.0:test
[INFO]    |  +- org.opentest4j:opentest4j:jar:1.2.0:test
[INFO]    |  \- org.junit.platform:junit-platform-commons:jar:1.7.0:test
[INFO]    +- org.junit.jupiter:junit-jupiter-params:jar:5.7.0:test
[INFO]    \- org.junit.jupiter:junit-jupiter-engine:jar:5.7.0:test
[INFO]       \- org.junit.platform:junit-platform-engine:jar:1.7.0:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sample projects depends on the JSON-P API and its reference implementation
by Glassfish. In addition, a dependency on the JUnit 5 test framework is
defined.
The sample project is my playground to get familiar with JSON-P functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Maven Dependency plugin provides the simplest way to display the classpath:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn dependency:build-classpath
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; net.gunther.cli:json2yaml &amp;gt;----------------------
[INFO] Building json2yaml 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.8:build-classpath (default-cli) @ json2yaml ---
[INFO] Dependencies classpath:
/home/gunther/.m2/repository/javax/json/javax.json-api/1.1/javax.json-api-1.1.jar:/home/gunther/.m2/repository/org/glassfish/javax.json/1.1/javax.json-1.1.jar:/home/gunther/.m2/repository/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar:/home/gunther/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar:/home/gunther/.m2/repository/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar:/home/gunther/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/home/gunther/.m2/repository/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar:/home/gunther/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar:/home/gunther/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar:/home/gunther/.m2/repository/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven creates this classpath by considering the project&amp;#8217;s dependencies. The
reported classpath consists of references to JAR files cached in
local  Maven repository. Even the JAR artifact of the project is referenced
from local Maven cache and not from the &lt;code&gt;/target&lt;/code&gt; directory one or the other
might expect. This means that at least Maven&amp;#8217;s &lt;code&gt;install&lt;/code&gt; lifecycle has to be
executed before the dependency plugin is able to build the classpath
correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note, that transitive dependencies are included in the generated
classpath, too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interestingly, the &lt;code&gt;dependency:build-classpath&lt;/code&gt; gives the &lt;em&gt;test classpath&lt;/em&gt;,
ie. it also includes dependencies of scope &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;provided&lt;/code&gt;. If you would
like to know the classpath required for running the project&amp;#8217;s application,
the &lt;code&gt;includeScope&lt;/code&gt; option has to be set as System property like follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn dependency:build-classpath -DincludeScope=compile
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; net.gunther.cli:json2yaml &amp;gt;----------------------
[INFO] Building json2yaml 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.8:build-classpath (default-cli) @ json2yaml ---
[INFO] Dependencies classpath:
/home/gunther/.m2/repository/org/glassfish/javax.json/1.1/javax.json-1.1.jar:/home/gunther/.m2/repository/javax/json/javax.json-api/1.1/javax.json-api-1.1.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_maven_exec_plugin&quot;&gt;Maven Exec Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Maven&amp;#8217;s exec plugin also makes a lot of use of the generated classpath.
Because the exec plugin allows to execute the project&amp;#8217;s application as defined
by the POM, it&amp;#8217;s not surprising that the required classpath is taken from Maven.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following, the &lt;code&gt;exec&lt;/code&gt; goal of the plugin is used. Even if the &lt;code&gt;java&lt;/code&gt;
goal is sufficient to execute Java application, the &lt;code&gt;exec&lt;/code&gt; is sometimes
beneficial because of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allows to execute non-Java applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Executes Java applications in its own JVM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The exec plugin provides another way to display the Maven generated classpath:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn exec:exec -Dexec.executable=echo -Dexec.args=&quot;%classpath&quot;
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; net.gunther.cli:json2yaml &amp;gt;----------------------
[INFO] Building json2yaml 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- exec-maven-plugin:3.0.0:exec (default-cli) @ json2yaml ---
/home/gunther/_work/java/json2yaml/target/classes:/home/gunther/.m2/repository/javax/json/javax.json-api/1.1/javax.json-api-1.1.jar:/home/gunther/.m2/repository/org/glassfish/javax.json/1.1/javax.json-1.1.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case the &lt;code&gt;echo&lt;/code&gt; command is executed and displays the classpath passed
in as &lt;code&gt;%classpath&lt;/code&gt; placeholder. The exec plugin substitutes this placeholder
when starting the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note, that the classpath does not contain &lt;em&gt;test&lt;/em&gt; dependencies, but only
reference artifacts actually required to execute the project&amp;#8217;s application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another usage of the Maven generated classpath by exec plugin is to actually
execute Java applications, eg.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ echo &apos;{ &quot;f1&quot;: &quot;v1&quot;, &quot;f2&quot;: &quot;v2&quot; }&apos; | mvn exec:exec -Dexec.executable=java -Dexec.args=&quot;-cp %classpath net.gunther.cli.json.PrettyPrinter&quot;
[INFO] Scanning for projects...
[INFO]
[INFO] ---------------------&amp;lt; net.gunther.cli:json2yaml &amp;gt;----------------------
[INFO] Building json2yaml 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- exec-maven-plugin:3.0.0:exec (default-cli) @ json2yaml ---
{
    &quot;f1&quot;: &quot;v1&quot;,
    &quot;f2&quot;: &quot;v2&quot;
}
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case the &lt;code&gt;java&lt;/code&gt; executable is started, which requires the classpath to
be given as &lt;code&gt;-cp %classpath&lt;/code&gt; option. The placeholder is again substituted by
references to the project&amp;#8217;s dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The input string &lt;code&gt;{ &quot;f1&quot;: &quot;v1&quot;, &quot;f2&quot;: &quot;v2&quot; }&lt;/code&gt; is piped to the JSON
pretty-printer demo application using &lt;code&gt;STDIN&lt;/code&gt;, the application writes given
JSON in beautified format to &lt;code&gt;STDOUT&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The classpath generated by Maven can be beneficially used in developer&amp;#8217;s
environments as demonstrated above. The dependencies of the project&amp;#8217;s POM are
considered and dependencies added to the project are automatically make their
way into the generated classpath - really cool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, this approach is not suitable for the packaged application, because
Maven is typically not available in the target runtime environment of an
application. Such use cases are better implemented by packaging as single JAR
that contains all dependencies. Alternatively, techniques described in my last
Blog
&lt;a href=&quot;https://guntherrotsch.github.io/blog_2020/executable-java-scripting.html&quot;&gt;Executable Scripts with Java&lt;/a&gt;
or approaches like &lt;code&gt;jbang&lt;/code&gt; may be applied - the &lt;code&gt;jbang&lt;/code&gt; project is in a very
early state, but looks promising.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://maven.apache.org/&quot;&gt;Maven project&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mojohaus.org/exec-maven-plugin/&quot;&gt;Maven Exec Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jbang.dev/&quot;&gt;jbang.dev project&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Executable Scripts with Java</title>
      <link>http://www.jbake.org/blog_2020/executable-java-scripting.html</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/executable-java-scripting.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_running_java_from_source&quot;&gt;Running Java from Source&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since Java 11 the &lt;code&gt;java&lt;/code&gt; command does have the &lt;code&gt;--source&lt;/code&gt; option, which allows
running Java code which is given in source. For demonstration purposes I&amp;#8217;m
using a Java 13 installation, but the sample will work with all Java
versions &amp;gt;11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ java -version
openjdk version &quot;13.0.1&quot; 2019-10-15
OpenJDK Runtime Environment (build 13.0.1+9)
OpenJDK 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the &lt;code&gt;--source&lt;/code&gt; feature is combined with the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix)&quot;&gt;Shebang&lt;/a&gt; of modern shells like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ cat hellojava.sh
#!/home/gunther/.jenv/shims/java --source 11
public class App {
    public static void main(String ...args){
        System.out.println(&quot;Hello, Java!&quot;);
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the file - given Posix file attributes include execute permission - can be
executed like a shell script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ ./hellojava.sh
Hello, Java!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java is still a compiled language, ie. before the &lt;em&gt;script&lt;/em&gt; starts, the Java
compiler still need to generate the byte-code to be executed. This impacts
the startup time of large scripts - Java applications
are in general not known for starting quickly. Nevertheless, the &lt;code&gt;--source&lt;/code&gt;
option allows more use cases implemented with Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;jenv&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The one or the other may be wondering about the java command of the &lt;em&gt;Shebang&lt;/em&gt;
definition. It actually points to the &lt;a href=&quot;https://github.com/jenv/jenv&quot;&gt;jenv&lt;/a&gt; tool,
which eases management of multiple Java installations in parallel. Generally,
the &lt;em&gt;Shebang&lt;/em&gt; command should the absolute path printed out by the &lt;code&gt;which&lt;/code&gt;
command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ which java
/home/gunther/.jenv/shims/java

$ jenv version
openjdk64-13.0.1 (set by /home/gunther/.jenv/version)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re looking for a more portable &lt;em&gt;Shebang&lt;/em&gt; definition, you could apply
the &lt;code&gt;env&lt;/code&gt; command as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;#!/usr/bin/env -S java --source 11
...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This definition executes the Java installation (first) found in the &lt;code&gt;PATH&lt;/code&gt;,
ie. the default Java installation on the system, regardless the installation
directory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_before_java_version_11&quot;&gt;Before Java Version 11&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It becomes less relevant with every day, but there are still organizations
supporting legacy systems that run on Java 8. In such a environment the
&lt;code&gt;--source&lt;/code&gt; option is not available. Nevertheless, there&amp;#8217;s still a way to
package Java applications into an executable file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s switch to Java 8 (thanks to &lt;code&gt;jenv&lt;/code&gt; this is a piece of cake :-):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ java -version
openjdk version &quot;1.8.0_222&quot;
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_222-b10)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.222-b10, mixed mode)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Java application is the same as before, just placed into a separate file
which follows the Java naming convention, ie. file name equals class name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ cat HelloJava.java

public class HelloJava {

	public static void main(String[] args) {
		System.out.println(&quot;Hello, Java!&quot;);
	}
}
$ javac -version
javac 1.8.0_222

$ javac HelloJava.java&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note, that for sake of simplicity the Java source and class files are in the
current working directory, ie. the class belongs to the default package. But
the demonstrated approach will work for any Java package structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next step the compiled class is packaged into a JAR file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ cat manifest.txt
Main-Class: HelloJava
$ jar cvfm hellojava.jar manifest.txt HelloJava.class
added manifest
adding: HelloJava.class(in = 424) (out= 287)(deflated 32%)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note, that the JAR&amp;#8217;s manifest defines the &lt;code&gt;HelloJava&lt;/code&gt; class as entry point
for execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Packaged the application as described, the executable can be created by
the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ echo &apos;#!/home/gunther/.jenv/shims/java -jar&apos; &amp;gt;hellojava8.sh
$ cat hellojava.jar &amp;gt;&amp;gt;hellojava8.sh
$ chmod +x hellojava8.sh
$ ./hellojava8.sh
Hello, Java!
$&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of placing the source code into the body of the shell script, the JAR
file itself is appended to the &lt;em&gt;Shebang&lt;/em&gt; line, on which the &lt;code&gt;--source&lt;/code&gt;
is replaced by the &lt;code&gt;-jar&lt;/code&gt; option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Though, the steps to create the &lt;em&gt;executable&lt;/em&gt; Java application can be automated,
the scripting experience gets partly lost by the need to explicitly compile and
package the Java classes. On the other hand, the startup time is better compared
to the source approach.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenv/jenv&quot;&gt;jenv&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Cloud-native Java with Quarkus</title>
      <link>http://www.jbake.org/blog_2020/quarkus-first-steps.html</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/quarkus-first-steps.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many reasons to take a look at the &lt;a href=&quot;https://quarkus.io&quot;&gt;Quarkus&lt;/a&gt;
framework. But beside its design for &lt;em&gt;developer friendliness&lt;/em&gt;, Quarkus
focuses consequently onto cloud platforms, it&amp;#8217;s perfectly suited for particular
container orchestrators like Kubernetes or OpenShift. Compared to classical JEE
platforms the benefits of Quarkus are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fast application startup by moving annotation processing from run-time to
build-time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;simplified packaging with just a single JAR file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;small application and container image size&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;native images possible by GraalVM support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus framework consists of a small core, to which arbitrary APIs can be
added  by extensions. Beside proprietary APIs, the most JEE and MicroProfife
APIs are available within the Quarkus ecosystem. That makes Quarkus a perfect
candidate for moving JakartaEE applications to the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a sample project I wanted to implement a simplified chat application.
Users visiting the chat room can submit messages to the server that get
distributed to all other users of the chat-room.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because JakartaEE Server-Sent Events (SSE) API are a perfect fit to distribute
small pieces of information from a server to one or many clients,
the Proof-of-Concept (PoC) project should demonstrate that SSE is eligible to
implement a chat application. For the distribution of a message to many
receivers the broadcast feature of SSE will be used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_getting_started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similar to &lt;a href=&quot;https://start.spring.io&quot;&gt;Spring initializr&lt;/a&gt;
or &lt;a href=&quot;https://thorntail.io/generator/&quot;&gt;Thorntail Project Generator&lt;/a&gt;
Quarkus offers a &lt;a href=&quot;https://code.quarkus.io/&quot;&gt;Start Coding&lt;/a&gt; page that let you pick
the desired dependencies/APIs and generates a starter project that is
downloaded as ZIP archive on demand. Alternatively, the starter project can be
generated by instantiating a Maven archetype.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For my PoC project I just picked &lt;em&gt;RESTEasy JAX-RS&lt;/em&gt; as extension, which
automatically includes CDI. The generated starter project contained:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sample JAX/RS resource&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sample static content&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maven POM and Maven wrapper script&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dockerfiles for different types of packages (OpenJDK, native GraalVM, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After extracting the generated project setup, the project can already be
executed by the Quarkus&apos; development server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ ./mvnw quarkus:dev
[INFO] Scanning for projects...
[INFO]
[INFO] --------------------&amp;lt; net.gunther:quarkus-chat-sse &amp;gt;--------------------
[INFO] Building quarkus-chat-sse 0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- quarkus-maven-plugin:1.6.1.Final:dev (default-cli) @ quarkus-chat-sse ---
[INFO] Using &apos;UTF-8&apos; encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 3 source files to /home/gunther/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/quarkus-chat-sse/target/classes
Listening for transport dt_socket at address: 5005
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,&amp;lt; / /_/contai /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2020-08-16 18:08:01,293 INFO  [io.quarkus] (Quarkus Main Thread) quarkus-chat-sse 0-SNAPSHOT on JVM (powered by Quarkus 1.6.1.Final) started in 1.509s. Listening on: http://0.0.0.0:8080
2020-08-16 18:08:01,309 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.
2020-08-16 18:08:01,309 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, qute, resteasy, resteasy-jsonb, resteasy-qute]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Browsers can directly navigate to the
&lt;a href=&quot;http://localhost:8080&quot;&gt;Quarkus Development server&lt;/a&gt;. Hence, the project setup is
complete and empowers developers to start immediately implementing their
application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One feature of the development server I&amp;#8217;d like to highlight: Modified
project code is immediately deployed. Even when dependencies defined
in the POM change the re-built application gets &lt;strong&gt;hot-deployed&lt;/strong&gt; - what JRebel
used to do in the past, can Quarkus already out-of-the-box, really cool.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_message_distribution_by_sse&quot;&gt;Message Distribution by SSE&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client of the chat application is implemented using HTML and JavaScript.
Thanks to Quarkus&apos; built-in feature to serve static content, the HTML
files just need to be added to the &lt;code&gt;src/main/resources/META-INF/resources/&lt;/code&gt;
folder. An &lt;code&gt;index.html&lt;/code&gt; file hosted in this folder can be fetched by a
Browser from &lt;code&gt;&lt;a href=&quot;http://localhost:8080/&quot; class=&quot;bare&quot;&gt;http://localhost:8080/&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;http://localhost:8080/index.html&quot; class=&quot;bare&quot;&gt;http://localhost:8080/index.html&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The core logic of the client consists of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;registering an &lt;code&gt;EventSource&lt;/code&gt; to receive chat messages as events&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transmitting messages users typed in to the server, which distributes it to
the other clients as Server-Sent Events&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the most important pieces of the client&amp;#8217;s code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&amp;lt;div id=&quot;history&quot;&amp;gt;&amp;lt;/div&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

&amp;lt;textarea id=&quot;inputbox&quot; name=&quot;inputbox&quot;&amp;gt;&amp;lt;/textarea&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;lt;button id=&quot;submitButton&quot;&amp;gt;Submit&amp;lt;/button&amp;gt;

&amp;lt;script&amp;gt;
  const evtSource = new EventSource(&quot;/chat?name={name}&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
evtSource.onmessage = function(event) {
  console.log(&quot;Received event: &quot;, event);
    const newElement = document.createElement(&quot;li&quot;);
    const historyList = document.getElementById(&quot;history&quot;);

  newElement.innerHTML = &quot;message: &quot; + event.data;
    historyList.appendChild(newElement);
}
evtSource.onerror = function(event) {
  console.error(&quot;EventSource error: &quot;, event);
}

document.getElementById(&quot;submitButton&quot;).onclick = function() { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  const message = document.getElementById(&quot;inputbox&quot;).value;

  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 &amp;amp;&amp;amp; this.status == 200) {
      alert(this.responseText);
    }
  };
  xhttp.open(&quot;POST&quot;, &quot;/chat&quot;, true);
  xhttp.setRequestHeader(&quot;Content-type&quot;, &quot;text/plain&quot;);
  xhttp.send(message);
}
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The list of user messages received from as SSE. Whenever a new event occurs
the message is appended to the list (see &amp;lt;3&amp;gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Text area users inputs messages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The registration of the &lt;code&gt;EventSource&lt;/code&gt; on the server. The &lt;code&gt;EventSource&lt;/code&gt;
is a standard HTML5/JavaScript API implemented by all Browsers nowadays.
Given proper registration on the server-side, SSEs are received by the
&lt;code&gt;EventSource#onmessage&lt;/code&gt; function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The function to submit messages to be send to the other users of the
chat-room.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JavaScript code to register is automatically executed on load of the page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server also implements 2 parts of logic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;registration of clients which enters the chat-room&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distribution of messages sent by users to all registered clients as SSE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Java code is also stripped down to the crucial parts here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@ApplicationScoped
@Path(&quot;/chat&quot;)
public class ChatResource {

	private static final Logger LOGGER = LoggerFactory.getLogger(ChatResource.class);

	private SseBroadcaster sseBroadcaster; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
	private Sse sse;

	@Context
	public synchronized void setSse(Sse sse) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
		if (this.sse != null) {
			return;
		}
		this.sse = sse;
		this.sseBroadcaster = sse.newBroadcaster();
		this.sseBroadcaster.onClose(eventSink -&amp;gt; LOGGER.info(&quot;On close EventSink: {}&quot;, eventSink));
		this.sseBroadcaster.onError(
				(eventSink, throwable) -&amp;gt; LOGGER.info(&quot;On Error EventSink: {}, Throwable: {}&quot;, eventSink, throwable));
	}

	@GET &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
	@Produces(MediaType.SERVER_SENT_EVENTS)
	public void register(@Context SseEventSink eventSink, @QueryParam(&quot;name&quot;) String name) {
		LOGGER.info(&quot;Registering user: {}&quot;, name);
		sseBroadcaster.register(eventSink);
		eventSink.send(sse.newEvent(String.format(&quot;Welcome, %s!&quot;, name)));
		broadcast(String.format(&quot;%s entered the chat room...&quot;, name));
	}

	@POST &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
	public void broadcast(String message) {
		OutboundSseEvent event = sse.newEventBuilder().data(message).reconnectDelay(10000).build();
		sseBroadcaster.broadcast(event);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;Sse&lt;/code&gt; and &lt;code&gt;SseBroadcaster&lt;/code&gt; objects are standard JAX-RS types. Because
these objects are thread-safe, they can after initialization (see
&lt;code&gt;ChatResource#setSse&lt;/code&gt; method) be used without synchronization.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Although the JAX-RS resource is &lt;code&gt;@ApplicationScoped&lt;/code&gt;, the &lt;code&gt;Context&lt;/code&gt; will be
injected on every call. That makes sense because the context can be different
on every call, even if the JAX-RS resource is a singleton. However, the
initialization of instance variables &lt;code&gt;Sse&lt;/code&gt; and &lt;code&gt;SseBroadcast&lt;/code&gt; has to be
performed only once. Otherwise, the registrations of clients get due to the
re-initialization lost on every request. Hence, the &lt;code&gt;setSse&lt;/code&gt; injection method
is synchronized and keeps the already existing initialization.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When users enter the chat-room, the client sends a registration to this
method, which &lt;code&gt;@Produces&lt;/code&gt; messages of server-sent event type. Newly registered
users are announced to the other visitors of the chat-room by a broadcast
message.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The messages typed in by users and submitted to the servers get broadcasted
to all registered users by this method.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because users should give their name on registration, the code for entering the
chartroom is implemented as template, that injects the user&amp;#8217;s name. For
templating the &lt;strong&gt;Qute&lt;/strong&gt; extension has been added to the project, which turned out
to be simple and straightforward. The entire code of the project is hosted in
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code/quarkus-chat-sse&quot;&gt;the &lt;code&gt;code&lt;/code&gt; branch of the Blog repo&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_containerization&quot;&gt;Containerization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far, we looked only at the development server. The following command will
create an executable single JAR:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ ./mvnw clean install
$ ll target
...
-rw-rw-r--  1 gunther gunther 285458 Aug 17 19:16 quarkus-chat-sse-0-SNAPSHOT-runner.jar
...

$ java -jar target/quarkus-chat-sse-0-SNAPSHOT-runner.jar
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,&amp;lt; / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2020-08-17 17:17:23,707 INFO  [io.quarkus] (main) quarkus-chat-sse 0-SNAPSHOT on JVM (powered by Quarkus 1.6.1.Final) started in 1.261s. Listening on: http://0.0.0.0:8080
2020-08-17 17:17:23,757 INFO  [io.quarkus] (main) Profile prod activated.
2020-08-17 17:17:23,758 INFO  [io.quarkus] (main) Installed features: [cdi, qute, resteasy, resteasy-jsonb, resteasy-qute]
2020-08-17 17:17:41,886 INFO  [io.quarkus] (main) quarkus-chat-sse stopped in 0.041s
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compared to classical application server deployments it&amp;#8217;s already noticeable
that&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;memory foot-print is small: 200 KB + JDK runtime, but no application server
installation required&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application starts up very fast: about 1 second on my a bit out-dated laptop;
simple JAX-RS applications take due to classpath-scanning on Wildfly 19 about
10 seconds&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This features already emphasize that Quarkus is suitable for cloud deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following, we take an look at how Quarkus supports creating application
containers, but leave apart the ability to create native GraalVM images, which
might be an extra Blog post in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_installing_jib_extension&quot;&gt;Installing jib extension&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus supports 3 different ways to build container image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker (requires a local Docker installation)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jib&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S2I by fabric8&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension for &lt;code&gt;jib&lt;/code&gt; support can be added to the project by submitting the
following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;gunther@gunther-K501UQ:~/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/quarkus-chat-sse$ ./mvnw quarkus:add-extension -Dextensions=&quot;container-image-jib&quot;
[INFO] Scanning for projects...
[INFO]
[INFO] --------------------&amp;lt; net.gunther:quarkus-chat-sse &amp;gt;--------------------
[INFO] Building quarkus-chat-sse 0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- quarkus-maven-plugin:1.6.1.Final:add-extension (default-cli) @ quarkus-chat-sse ---
Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/shrinkwrap-depchain/1.2.6/shrinkwrap-depchain-1.2.6.json
Downloading from central: https://repo.maven.apache.org/maven2/org/jboss/shrinkwrap/shrinkwrap-depchain-descriptor-json/1.2.6/shrinkwrap-depchain-descriptor-json-1.2.6.json
Downloading from central: https://repo.maven.apache.org/maven2/io/vertx/vertx-rx/3.9.1/vertx-rx-3.9.1.json
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_building_the_image&quot;&gt;Building the image&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After installing the &lt;code&gt;jib&lt;/code&gt; extension, the following command builds the image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;gunther@gunther-K501UQ:~/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/quarkus-chat-sse$ ./mvnw clean package -Dquarkus.container-image.build=true
[INFO] Scanning for projects...
[INFO]
[INFO] --------------------&amp;lt; net.gunther:quarkus-chat-sse &amp;gt;--------------------
[INFO] Building quarkus-chat-sse 0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The built image is based on the lean Alpine Linux. However, distroless base
images might be an alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The image can be started as usual by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;gunther@gunther-K501UQ:~/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/quarkus-chat-sse$ docker run -it --rm gunther/quarkus-chat-sse:0-SNAPSHOT
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,&amp;lt; / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2020-08-17 17:17:23,707 INFO  [io.quarkus] (main) quarkus-chat-sse 0-SNAPSHOT on JVM (powered by Quarkus 1.6.1.Final) started in 1.261s. Listening on: http://0.0.0.0:8080
2020-08-17 17:17:23,757 INFO  [io.quarkus] (main) Profile prod activated.
2020-08-17 17:17:23,758 INFO  [io.quarkus] (main) Installed features: [cdi, qute, resteasy, resteasy-jsonb, resteasy-qute]
^C2020-08-17 17:17:41,886 INFO  [io.quarkus] (main) quarkus-chat-sse stopped in 0.041s


gunther@gunther-K501UQ:~/_work/repos/GuntherRotsch.github.com/guntherrotsch.github.io/code/quarkus-chat-sse$ docker images
REPOSITORY                                                         TAG                       IMAGE ID            CREATED              SIZE
gunther/quarkus-chat-sse                                           0-SNAPSHOT                265891dea59b        About a minute ago   200MB
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The startup time is still about 1 second and the image size is about 200 MB for
our sample application utilizing JAX-RS, CDI, and Templating. That&amp;#8217;s really
impressive, if you compare it with application server based setups, which result
to my experience in images sizes of roughly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JAX-RS service application &amp;amp; Wildlfly &amp;amp; OpenJDK: 750 MB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JAX-RS service application &amp;amp; Thorntail &amp;amp; OpenJDK: 400 MB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The native GraalVM image of the Quarkus application would even be considerably
smaller.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The developer experience of Quarkus is incredible: Easy project setup and
short development cycles due to hot-deployment with development server.
In addition, Quarkus is well documented and actively supported by the community.
The APIs offered by extensions do not miss anything.
No wonder that the popularity of Quarkus arose to almost the level of Spring
Boot within just 2 years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, the cloud-related properties are impressive, in regard to both,
the image size as well as the startup time. Now even for Server-less deployment
targets Java applications can considered without bad conscience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, the availability of Quarkus extensions of JEE/Jakarta EE APIs makes
it a perfect candidate for migration of standard Java EE applications into the
cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://quarkus.io&quot;&gt;Quarkus&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://code.quarkus.io/&quot;&gt;Start Coding&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://start.spring.io&quot;&gt;Spring Initializr&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://thorntail.io/generator/&quot;&gt;Thorntail Project Generator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Sharing Host File with Container</title>
      <link>http://www.jbake.org/blog_2020/file-sharing-with-container.html</link>
      <pubDate>Tue, 9 Jun 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/file-sharing-with-container.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eclipse Theia is the code editor integrated into Eclipse Che, which calls itself
as &lt;a href=&quot;https://www.eclipse.org/che/&quot;&gt;The Kubernetes-Native IDE for Developer Teams&lt;/a&gt;.
There are different ways to execute Eclipse Theia independent of Eclipse Che
as described by the article
&lt;a href=&quot;https://eclipsesource.com/de/blogs/2019/09/25/how-to-launch-eclipse-theia/&quot;&gt;How to launch Eclipse Theia&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sharing_files_between_host_and_container&quot;&gt;Sharing files between host and container&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting Eclipse Theia in a pre-configured Docker container prevents you from
complex installation procedures. As mentioned on the Eclipse Theia IDE Github
repository, executing the IDE is as easy as submitting the command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ docker run -it --init -p 3000:3000 \
             -v &quot;$(pwd):/home/project:cached&quot; \
             theiaide/theia-java:next&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
As Java developer I went for the Java flavored IDE, but other languages
are available, too.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;-v&lt;/code&gt; option of the Docker run command maps the current working directory
&lt;code&gt;$(pwd)&lt;/code&gt; to the &lt;code&gt;/home/project&lt;/code&gt; directory, where the IDE expects the workspace
files.
In this case, the host files are shared with the container, ie. we
&lt;a href=&quot;https://docs.docker.com/storage/bind-mounts/&quot;&gt;use bind mounts&lt;/a&gt;. Although,
the preferred mechanism for persisting data with Docker is to
&lt;a href=&quot;https://docs.docker.com/storage/volumes/&quot;&gt;use volumes&lt;/a&gt;, the utilization of
bind mounts is fine here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I started the Theia container from the root directory of an existing
Maven project, the IDE can be opened in the Browser on &lt;code&gt;&lt;a href=&quot;http://localhost:3000&quot; class=&quot;bare&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/Eclipse_Theia.png&quot; alt=&quot;Image: Eclipse Theia Workspace&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The terminal integrated in the IDE runs a shell in the container of the IDE.
There the files of the workspace are listed using the &lt;code&gt;ls&lt;/code&gt; command. The file&amp;#8217;s
owner are reported as &lt;code&gt;node&lt;/code&gt;. However, the Maven build in IDE&amp;#8217;s terminal
fails with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;[ERROR] Failed to execute goal org.apache.maven.plugins:maven-clean-plugin:3.1.0:clean (default-clean) on project bean-validation: Failed to clean project: Failed to delete /home/project/target/generated-test-sources/test-annotations -&amp;gt; [Help 1]: value&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Maven build cannot remove the &lt;code&gt;target&lt;/code&gt; folder, because the container runs
with the user &lt;code&gt;theia&lt;/code&gt;, which is apparently not the owner of the files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;theia@466d3953d9e1:/home/project$ id
uid=1001(theia) gid=1001(theia) groups=1001(theia)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s also a bit confusing at the first glance is that the shell on the
host system reports the very same files to be owned by my personal
user &lt;code&gt;gunther&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ ls -al
total 40
drwxrwxr-x  5 gunther gunther 4096 Mai 24 12:04 .
drwxrwxr-x  4 gunther gunther 4096 Mai 20 20:00 ..
-rw-r--r--  1 gunther gunther 1504 Apr 10 13:53 .classpath
-rw-rw-r--  1 gunther gunther 4680 Mai 24 12:04 pom.xml
-rw-r--r--  1 gunther gunther  544 Apr 10 12:26 .project
-rw-rw-r--  1 gunther gunther  261 Apr 13 12:43 README.txt
drwxr-xr-x  2 gunther gunther 4096 Apr 10 12:26 .settings
drwxrwxr-x  4 gunther gunther 4096 Dez 17 18:29 src
drwxr-xr-x 10 gunther gunther 4096 Mai 24 11:49 target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To break things up: The file permission is checked by the Linux kernel.
The kernel does not know anything about user names, but works with user IDs
only. The &lt;code&gt;/etc/passwd&lt;/code&gt; file or LDAP integration or a similar mechanism takes
care of mapping the user IDs to names. That explains why the &lt;code&gt;ls&lt;/code&gt; command
reports different user names as owner of shared files inside and outside
of the container. The user &lt;code&gt;gunther&lt;/code&gt; on the host system does have the same
ID as the user &lt;code&gt;node&lt;/code&gt; in the Theia container:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ id
uid=1000(gunther) gid=1000(gunther) groups=1000(gunther),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),118(lpadmin),129(sambashare),999(microk8s),1001(docker)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another fact to keep is mind is that the Linux kernel is shared between the
host and all containers. That&amp;#8217;s, by the way, one big difference to virtual
machines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we want to fix the permissions, so that user running the container owns
the shared file of the workspace, we could add the &lt;code&gt;-u&lt;/code&gt; option when starting
the container as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;docker run -it --rm --init -p 3000:3000 \
           -u $UID:$(id -g) \
           -v &quot;$(pwd):/home/project:cached&quot; \
           theiaide/theia-java:next&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now the container runs with user ID &lt;code&gt;1000&lt;/code&gt;, the same ID as the user &lt;code&gt;gunther&lt;/code&gt;
on the host system:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;node@11e14537a344:/home/project$ id
uid=1000(node) gid=1000(node) groups=1000(node)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned before, the name of the user does not matter, only its ID
counts. The Maven build in the IDE&amp;#8217;s terminal, ie. executed by the container,
runs successful now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
After changing the user ID of the container, Eclipse Theia IDE does not
work properly anymore. Other files inside the container are not longer
readable or writable. Though, changing the container&amp;#8217;s user is not a
sustainable solution to share Theia workspaces with the host.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;File permissions are checked by the Linux kernel based on the user&amp;#8217;s id,
never considering the name of the user which belongs to the ID. Starting
containers with a certain user ID can fix file permission issues, but
often cause issues when containers expect to run under a particular user
ID.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_links&quot;&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse-theia/theia&quot;&gt;Github - Eclipse Theia&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/che/&quot;&gt;Project - Eclipse Che&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/storage/bind-mounts/&quot;&gt;Docker - Use bind mounts&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/storage/volumes/&quot;&gt;Docker - Use volumes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://eclipsesource.com/de/blogs/2019/09/25/how-to-launch-eclipse-theia/&quot;&gt;Blog Post - How to launch Eclipse Theia&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Cloud-native Java</title>
      <link>http://www.jbake.org/blog_2020/containerized-java-app.html</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/containerized-java-app.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Migrating to the cloud by just replacing machines of the own data-center by
virtual machines in the cloud, does not provide much benefit, neither
regarding costs nor in terms of administration effort. Therefor, the
utilization of container orchestration platforms like Kubernetes or
OpenShift is assumed in the following - if not even talking about FaaS
or Serverless, the latest hype in cloud technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Container orchestration platforms works best for MicroService architectures,
ie. the shift to the cloud may have impact on the application architecture.
Because this blog post wants to focus on the Java platform for cloud
deployments, applications are assumed to be designed in a service-oriented
way already.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_competitors&quot;&gt;Competitors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When making a technology decision for cloud-native applications, it&amp;#8217;s worth
to start with a look at the first-class citizen of cloud application, the
Golang platform. The features that make Golang stand out are speed and size -
speed in terms of start-up and execution, size in terms of image size and
memory requirements at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The classical Java EE environments are typically based on an application
server and optimized for long-running applications, running on large
servers. For such deployments start-up time and memory requirements are
not that important.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_building_images&quot;&gt;Building Images&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One advice for building production-ready container images for Golang
applications is to create the images &lt;code&gt;FROM scratch&lt;/code&gt;, ie. don&amp;#8217;t base
the image of a Linux distribution. The main reason for this is not to
reduce the image size, but to reduce the attack surface, which greatly
improves security.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Can we do the same for Java applications? Unfortunately not, because
the JDK isn&amp;#8217;t statically linked like Golang applications are, but
dynamically linked against &lt;code&gt;glibc&lt;/code&gt; or &lt;code&gt;musl&lt;/code&gt; library. These libraries
are typically part of a Linux distribution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a small demo application, I used the
&lt;a href=&quot;https://thorntail.io/generator/&quot;&gt;Thorntail generator&lt;/a&gt;
and selected the technologies &lt;code&gt;JAX-RS + CDI + JSON-B&lt;/code&gt;.
After extracting the downloaded ZIP file to a folder the application
can be started locally with&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mvn thorntail:run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the application server is ready the application can be used:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;gunther@gunther-K501UQ:~/Downloads$ curl localhost:8080/hello -v
*   Trying 127.0.0.1:8080...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8080 (#0)
&amp;gt; GET /hello HTTP/1.1
&amp;gt; Host: localhost:8080
&amp;gt; User-Agent: curl/7.68.0
&amp;gt; Accept: */*
&amp;gt;
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Connection: keep-alive
&amp;lt; Content-Type: text/plain;charset=UTF-8
&amp;lt; Content-Length: 21
&amp;lt; Date: Sat, 02 May 2020 13:36:50 GMT
&amp;lt;
* Connection #0 to host localhost left intact
Hello from Thorntail!gunther@gunther-K501UQ:~/Downloads$
gunther@gunther-K501UQ:~/Downloads$&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The best you can do to keep the image lean is to use the OpenJDK linked
against the &lt;code&gt;musl&lt;/code&gt; library. That&amp;#8217;s the case for Alpine Linux, a distribution
tailored for cloud environments. After building the application with
&lt;code&gt;mvn clean install&lt;/code&gt;, the demo application can be packaged into
an image by using the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;FROM openjdk:14-jdk-alpine

COPY target/demo-thorntail.jar /app/demo-thorntail.jar

EXPOSE 8080

CMD [&quot;java&quot;, &quot;-Djava.net.preferIPv4Stack=true&quot;, &quot;-Djava.net.preferIPv4Addresses=true&quot;, &quot;-jar&quot;, &quot;/app/demo-thorntail.jar&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resulting image size is about 450 MB. The same application packaged
into an image with a Wildfly application server gives a size of about 750 MB.
That&amp;#8217;s clearly shows, that application servers are not appropriate for
containerized Java payload. However, compared to about 20 MB, which is the
size of a Golang image with the same functionality, the Thorntail image cannot
compete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the start-up time of the Java EE application takes - mostly
because of classpath scanning and reflection to process JEE annotations -
several seconds, while the Golang application is ready to use in some
milliseconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because classical Java EE applications are not a good fit for cloud-native
platforms, several other options arise in the Java world at this time:
Eclipse MicroProfile, alternative Java EE packaging like Hammock,
Micro Frameworks like Micronaut, Helidon, Spring Fu, Javalin, Spark, Ratpack,
Dropwizard or Akka,
native images with GraalVM, etc. The approaches to evolve the Java platform
to the future could fill books. It&amp;#8217;s almost comparable to the situation of
the JavaScript world a few years ago: Lots of different frameworks with
unclear future. If you go for a framework today, you might end up with a
unsupported platform in a few years. Eg. the Thorntail framework, although
just about 4 years old (including the life-time of its successor Wildfly
Swarm), is pretty much dead
(see &lt;a href=&quot;https://thorntail.io/posts/thorntail-community-announcement-on-quarkus&quot;&gt;Thorntail
Community Announcement on Quarkus&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The situation today is a bit ambivalent: Java is the undisputed number one
programming language and platform, but not well suited for cloud native
runtime environments. On the other hand everybody moves from classical
on-premises servers to cloud platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because of the diversity of Java frameworks future-proof technical decisions
are hard today. The best you can do from my point of view is to stay as close
to JEE standards as possible. That&amp;#8217;s the reason I&amp;#8217;ll surely have a look at
Quarkus in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>OpenApi generated JAX/RS Service: Bean Validation</title>
      <link>http://www.jbake.org/blog_2020/openapi-bean-validation.html</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/openapi-bean-validation.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing JAX/RS REST APIs with OpenApi following a Design-First approach
starts with the formal specification of the REST API. The OpenAPI generators
are used to create server stubs as well as client API code. For Java JAX/RS
generated servers, the request model classes already contain validations in
form of JSR 380 annotations like &lt;code&gt;@NotNull&lt;/code&gt;. But because of limitations in
validation specification with OpenAPI or gaps of the code generators, more
often than not, validation rules need to be added to the generated model
classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;JSR 380&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jakarta EE 8 includes the version 2.0 of JSR 380, the &lt;em&gt;Bean Validation&lt;/em&gt;
standard for checking validity of model objects. The bean validation is mainly
applied to request parameters and persisted entity objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bean Validation standardizes constraint definition, declaration and validation
for the Java platform. Its first two incarnations have been widely popular
amongst the Java community in both, SE and EE environments. Integrations with
many other specifications (CDI, JAX-RS, JPA, etc.) and frameworks have been
created.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;d like illustrate the issue and possible solutions of extending the request
object validation for REST APIs by a simplified, yet realistic example.
You&amp;#8217;ll find the sample project in the folder &lt;code&gt;bean-validation&lt;/code&gt; of the
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code&quot;&gt;code
branch of the Blog repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The sample application is packaged as web application (WAR file) and for tests
deployed to a Wildfly 19 application server.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_example&quot;&gt;Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say, you&amp;#8217;re going to define a REST API to manage &lt;em&gt;Ranges&lt;/em&gt; defined by a
minimum and maximum integer values. The following OpenAPI snippet defines the
&lt;code&gt;Range&lt;/code&gt; object:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;  components:
    schemas:
      Range:
        properties:
          min:
            type: &quot;integer&quot;
            minimum: 1
            maximum: 1000
          max:
            type: &quot;integer&quot;
            minimum: 1
            maximum: 1000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenAPI generator &lt;strong&gt;Java JAX/RS spec&lt;/strong&gt; creates the following model class from the specification:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class Range   {

  private @Valid Integer min;
  private @Valid Integer max;

  /**
   * minimum: 1
   * maximum: 1000
   **/
  public Range min(Integer min) {
    this.min = min;
    return this;
  }

  @ApiModelProperty(value = &quot;&quot;)
  @JsonProperty(&quot;min&quot;)
  @Min(1) @Max(1000)  public Integer getMin() {
    return min;
  }
  public void setMin(Integer min) {
    this.min = min;
  }

  /**
   * minimum: 1
   * maximum: 1000
   **/
  public Range max(Integer max) {
    this.max = max;
    return this;
  }

  @ApiModelProperty(value = &quot;&quot;)
  @JsonProperty(&quot;max&quot;)
  @Min(1) @Max(1000)  public Integer getMax() {
    return max;
  }
  public void setMax(Integer max) {
    this.max = max;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Range range = (Range) o;
    return Objects.equals(this.min, range.min) &amp;amp;&amp;amp;
        Objects.equals(this.max, range.max);
  }

  @Override
  public int hashCode() {
    return Objects.hash(min, max);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(&quot;class Range {\n&quot;);

    sb.append(&quot;    min: &quot;).append(toIndentedString(min)).append(&quot;\n&quot;);
    sb.append(&quot;    max: &quot;).append(toIndentedString(max)).append(&quot;\n&quot;);
    sb.append(&quot;}&quot;);
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return &quot;null&quot;;
    }
    return o.toString().replace(&quot;\n&quot;, &quot;\n    &quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the generated model class already contains Bean Validation
annotations like &lt;code&gt;@Min&lt;/code&gt; and &lt;code&gt;@Max&lt;/code&gt;. Because JAX/RS integrates with Bean
Validation this annotations are considered when the also generated API
classes are called. Such a API class may be a POST to create a new &lt;code&gt;Range&lt;/code&gt;
resource:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;  paths:
    /range:
      post:
        operationId: newRange
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: &apos;#/components/schemas/Range&apos;
        responses:
          201:
            description: &quot;Range resource created successfully&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without any manually written code the deployed service responds with HTTP
status 400 (Bad Request) when called with a &lt;code&gt;Range&lt;/code&gt; object, that violates
one of the bean validation rules. The following &lt;code&gt;curl&lt;/code&gt; statement illustrates
the generated API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ curl localhost:8080/bean-validation/range -d &apos;{ &quot;min&quot;: 0, &quot;max&quot;: 1 }&apos; \
      -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -o - \
 | jq
...
{
  &quot;exception&quot;: null,
  &quot;fieldViolations&quot;: [],
  &quot;propertyViolations&quot;: [],
  &quot;classViolations&quot;: [],
  &quot;parameterViolations&quot;: [
    {
      &quot;constraintType&quot;: &quot;PARAMETER&quot;,
      &quot;path&quot;: &quot;newRange.arg0.min&quot;,
      &quot;message&quot;: &quot;must be greater than or equal to 1&quot;,
      &quot;value&quot;: &quot;0&quot;
    }
  ],
  &quot;returnValueViolations&quot;: []
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up to this point everything seems to be fine. But we miss an important
validation rule: The provided minimum value has to be equal or smaller than
the maximum contained in the request. Unfortunately, such a rule can neither
expressed by an OpenAPI specification nor considered by any generator
available. This basically applies to all validations taking multiple fields
of a class into account. But how do we implement such validations?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we discuss different implementation options, let&amp;#8217;s list the
requirements of request validation from a API user&amp;#8217;s point of view:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Validation rule violations should be reported the same way as JSR 380 detected
violations, ie. no mix of JSR 380 and application formatted violation reports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The violation report returned by the application server should consider
the &lt;code&gt;Accept&lt;/code&gt; header given by the client, ie. as shown in example above, if
the request contains a header &lt;code&gt;Accept: application/json&lt;/code&gt;, the response should
be in JSON format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invalid requests should create a response containing &lt;strong&gt;all&lt;/strong&gt; violated rules.
It&amp;#8217;s not reasonable for a user if &lt;strong&gt;some&lt;/strong&gt; violations are reported, fixed by the
user and on the next request &lt;strong&gt;some other&lt;/strong&gt; violations get reported - such
behavior is rather annoying.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The listed requirements are far from being complete and focus more on the
reporting of validation rule violation, the area relating to REST API and
affecting the API&amp;#8217;s user mostly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the requirements in mind, some implementation ideas appear immediately as
insufficient:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Changing generated code is generally not an option, because after re-generation
the manual changes are overwritten and get lost.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because of the individual nature of the validation rules, adapting the
code generator, eg. with custom templates, don&amp;#8217;t look promising.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Moving validation checks into the business code would ignore most of the
requirements listed above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cdi_based_solution&quot;&gt;CDI based Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One design pattern I&amp;#8217;ve seen in professional projects is based on the fact,
that Bean Validation is not only integrated with JAX/RS, but also with CDI.
For the range sample the implementation of this pattern requires the definition
of a wrapper class around the &lt;code&gt;Range&lt;/code&gt; object, that implements the additional
validation as JSR 380 rule:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class ValidateableRange {

	private final Range range;

	public ValidateableRange(Range range) {
		this.range = range;
	}

	@Valid
	public Range getRange() {
		return range;
	}

	@AssertTrue(message = &quot;min must be less than or equal to max&quot;)
	public boolean isMinLessThanOrEqualToMax() {
		return range.getMin() &amp;lt;= range.getMax();
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, a &lt;em&gt;validator&lt;/em&gt; CDI bean is required:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@ApplicationScoped
public class ApplicationValidator {

	public void validate(@Valid ValidateableRange validateableRange) {
		// no-op
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note, that the &lt;em&gt;validator&lt;/em&gt; can contain several validation methods for
different objects, that need to be validated.
Please also note, that the validation method is empty. The &lt;code&gt;@Valid&lt;/code&gt; annotation
attached to the method argument is the crucial piece, that triggers the Bean
Validation when the method is called.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given these classes, the validation can be triggered before the actual
processing of the request is started:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Inject ApplicationValidator appValidator;

public Response newRange(Range range) {
  appValidator.validate(new ValidateableRange(range));

  // business logic goes here
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation of this pattern satisfies all requirements, but the 3rd one:
Request validation is performed two times, first when the request enters
the JAX/RS API method and second when the &lt;code&gt;ApplicationValidator&lt;/code&gt; enters the
stage. Because the &lt;code&gt;ApplicationValidator&lt;/code&gt; performs additional checks, invalid
requests fixed by the user may report more violations when called the second
time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are more problems with this pattern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some validation may be checked twice. That can become problematic when
checking the validation rules is rather &lt;em&gt;expensive&lt;/em&gt; in terms of resource
consumption/performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The reported objects may be of type &lt;code&gt;ValidateableRange&lt;/code&gt;, although, the API
user requested a &lt;code&gt;Range&lt;/code&gt; object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, for many projects, in particular for internal APIs, the
behavior implemented by this CDI based validation pattern is sufficient.
In addition, it&amp;#8217;s entirely based on Java code and therefor very flexible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But if you offer a public REST API, the requirements of API consistency and
quality may be higher, also in terms of request validation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_general_jaxrs_solution&quot;&gt;General JAX/RS Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To satisfy all requirements listed above, the solution need to be based on
JAX/RS and Bean Validation solely. The question is, how should this be done
when the JAX/RS resources are generated and not easy modifiable?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To begin, let&amp;#8217;s ignore the fact, that some code is generated. A class&apos;
validation rule like the sample above &lt;em&gt;min must be less or equal to max&lt;/em&gt;,
can be implemented:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generically with a &lt;code&gt;@AssertTrue&lt;/code&gt; (or &lt;code&gt;@AssertFalse&lt;/code&gt;) annotated method like
in &lt;code&gt;ValidatebleRange&lt;/code&gt; example above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More specific with a custom validator, that can be associated by a custom
annotation to the model class to be validated.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the generic solution would require the modification of the generated
code, let&amp;#8217;s have a look at the second option. Therefor a validator as well
as a annotation like the following are needed in our &lt;em&gt;range&lt;/em&gt; sample:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;public class RangeValidator implements ConstraintValidator&amp;lt;CheckMinLessOrEqualMax, Range&amp;gt; {

	public void initialize(CheckMinLessOrEqualMax arg0) {
	}

	public boolean isValid(Range range, ConstraintValidatorContext context) {
		return range.getMin() &amp;lt;= range.getMax();
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@Target({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE_USE })
@Retention(RUNTIME)
@Constraint(validatedBy = RangeValidator.class)
@Documented
public @interface CheckMinLessOrEqualMax {
	String message() default &quot;{net.gunther.jee.beansvalidation.xml.RangeValidator.&quot; + &quot;message}&quot;;

	Class&amp;lt;?&amp;gt;[] groups() default {};

	Class&amp;lt;? extends Payload&amp;gt;[] payload() default {};
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The defined &lt;code&gt;RangeValidator&lt;/code&gt; is typically attached to the objects of range
&lt;code&gt;Range&lt;/code&gt; by annotating this class with &lt;code&gt;@CheckMinLessOrEqualMax&lt;/code&gt;. Because the
&lt;code&gt;Range&lt;/code&gt; class is a generated API model class, this is not possible. However,
like most Jakarta EE APIs, beside annotations, XML deployment descriptor are
supported for configuration of the API&amp;#8217;s objects or beans. For our example
we just create a &lt;code&gt;META-INF/validation.xml&lt;/code&gt; deployment descriptor to activate
custom Bean Validation configurations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;validation-config
	xmlns=&quot;http://xmlns.jcp.org/xml/ns/validation/configuration&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/validation/configuration
            http://xmlns.jcp.org/xml/ns/validation/configuration/validation-configuration-2.0.xsd&quot;
	version=&quot;2.0&quot;&amp;gt;

	&amp;lt;default-provider&amp;gt;org.hibernate.validator.HibernateValidator&amp;lt;/default-provider&amp;gt;
	&amp;lt;message-interpolator&amp;gt;org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator&amp;lt;/message-interpolator&amp;gt;
	&amp;lt;constraint-mapping&amp;gt;META-INF/validation/constraints-range.xml&amp;lt;/constraint-mapping&amp;gt;
&amp;lt;/validation-config&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This deployment descriptor references a &lt;code&gt;META-INF/validation/constraints-range.xml&lt;/code&gt;
file, that eventually attaches the custom annotation &lt;code&gt;CheckMinLessOrEqualMax&lt;/code&gt;
to the &lt;code&gt;Range&lt;/code&gt; model class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;constraint-mappings
	xmlns=&quot;http://xmlns.jcp.org/xml/ns/validation/mapping&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/validation/mapping
            http://xmlns.jcp.org/xml/ns/validation/mapping/validation-mapping-2.0.xsd&quot;
	version=&quot;2.0&quot;&amp;gt;

	&amp;lt;default-package&amp;gt;net.gunther.blog.codegen.models&amp;lt;/default-package&amp;gt;

	&amp;lt;bean class=&quot;Range&quot; ignore-annotations=&quot;false&quot;&amp;gt;
		&amp;lt;class&amp;gt;
			&amp;lt;constraint annotation=&quot;net.gunther.jee.beansvalidation.xml.CheckMinLessOrEqualMax&quot;&amp;gt;
				&amp;lt;message&amp;gt;min must be less than or equal to max&amp;lt;/message&amp;gt;
			&amp;lt;/constraint&amp;gt;
		&amp;lt;/class&amp;gt;
	&amp;lt;/bean&amp;gt;

&amp;lt;/constraint-mappings&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that in place, the request validation satisfies all requirements listed
above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ curl localhost:8080/bean-validation/range -d &apos;{ &quot;min&quot;: 1001, &quot;max&quot;: 0 }&apos; \
       -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -o - -v \
     | jq
...
&amp;gt; POST /bean-validation/range HTTP/1.1
&amp;gt; Host: localhost:8080
&amp;gt; User-Agent: curl/7.65.3
&amp;gt; Content-Type: application/json
&amp;gt; Accept: application/json
...
&amp;gt;
...
&amp;lt; HTTP/1.1 400 Bad Request
&amp;lt; validation-exception: true
&amp;lt; Content-Type: application/json
...

{
  &quot;exception&quot;: null,
  &quot;fieldViolations&quot;: [],
  &quot;propertyViolations&quot;: [],
  &quot;classViolations&quot;: [],
  &quot;parameterViolations&quot;: [
    {
      &quot;constraintType&quot;: &quot;PARAMETER&quot;,
      &quot;path&quot;: &quot;newRange.arg0.max&quot;,
      &quot;message&quot;: &quot;must be greater than or equal to 1&quot;,
      &quot;value&quot;: &quot;0&quot;
    },
    {
      &quot;constraintType&quot;: &quot;PARAMETER&quot;,
      &quot;path&quot;: &quot;newRange.arg0.min&quot;,
      &quot;message&quot;: &quot;must be less than or equal to 1000&quot;,
      &quot;value&quot;: &quot;1001&quot;
    },
    {
      &quot;constraintType&quot;: &quot;PARAMETER&quot;,
      &quot;path&quot;: &quot;newRange.arg0&quot;,
      &quot;message&quot;: &quot;min must be less than or equal to max&quot;,
      &quot;value&quot;: &quot;class Range {\n    min: 1001\n    max: 0\n}&quot;
    }
  ],
  &quot;returnValueViolations&quot;: []
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The validation is complete, ie. all validation rules are checked, regardless
of how they are activated, by annotation or XML deployment descriptor. The
validation is entirely based on JSR 380 Bean Validation. Because of the
good integration of Bean Validation with JAX/RS, the requested response
format is also considered, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ curl localhost:8080/bean-validation/range -d &apos;{ &quot;min&quot;: 1001, &quot;max&quot;: 0 }&apos; \
       -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/xml&quot; -o - -v \
     | xmllint --format -
...
&amp;gt; POST /bean-validation/range HTTP/1.1
&amp;gt; Host: localhost:8080
&amp;gt; User-Agent: curl/7.65.3
&amp;gt; Content-Type: application/json
&amp;gt; Accept: application/xml
...
&amp;lt; HTTP/1.1 400 Bad Request
&amp;lt; validation-exception: true
&amp;lt; Content-Type: application/xml;charset=UTF-8
...

&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;violationReport&amp;gt;
  &amp;lt;parameterViolations&amp;gt;
    &amp;lt;constraintType&amp;gt;PARAMETER&amp;lt;/constraintType&amp;gt;
    &amp;lt;path&amp;gt;newRange.arg0&amp;lt;/path&amp;gt;
    &amp;lt;message&amp;gt;min must be less than or equal to max&amp;lt;/message&amp;gt;
    &amp;lt;value&amp;gt;class Range {
    min: 1001
    max: 0
}&amp;lt;/value&amp;gt;
  &amp;lt;/parameterViolations&amp;gt;
  &amp;lt;parameterViolations&amp;gt;
    &amp;lt;constraintType&amp;gt;PARAMETER&amp;lt;/constraintType&amp;gt;
    &amp;lt;path&amp;gt;newRange.arg0.max&amp;lt;/path&amp;gt;
    &amp;lt;message&amp;gt;must be greater than or equal to 1&amp;lt;/message&amp;gt;
    &amp;lt;value&amp;gt;0&amp;lt;/value&amp;gt;
  &amp;lt;/parameterViolations&amp;gt;
  &amp;lt;parameterViolations&amp;gt;
    &amp;lt;constraintType&amp;gt;PARAMETER&amp;lt;/constraintType&amp;gt;
    &amp;lt;path&amp;gt;newRange.arg0.min&amp;lt;/path&amp;gt;
    &amp;lt;message&amp;gt;must be less than or equal to 1000&amp;lt;/message&amp;gt;
    &amp;lt;value&amp;gt;1001&amp;lt;/value&amp;gt;
  &amp;lt;/parameterViolations&amp;gt;
&amp;lt;/violationReport&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I&amp;#8217;ve found XML descriptors also useful in other use cases, when the
concerned objects/beans are third-party and not owned by the application
project&amp;#8217;s team. This is not only true for Bean Validation, but many
other Jakarta EE standards.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any serious application requires the validation of input data. That&amp;#8217;s also
true for REST APIs, which need to validate the received request objects.
The team JAX/RS and Bean Validation offers a lot of possibilities, when it
comes to validate the input of REST APIs. Even if the JAX/RS resources and
API model classes are generated - in our example with OpenAPI generators -
this article demonstrated options to apply mentioned Jakarta EE standards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the CDI based, Java code only solution works well and offers sufficient
results for many projects, the solution applying XML deployment descriptors
is best from an API&amp;#8217;s user point of view. IMHO, there&amp;#8217;s rarely a need to
mix business code with validation logic and worsen the usability of the API.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>OpenApi generated JAX/RS Service: JAX/RS Context</title>
      <link>http://www.jbake.org/blog_2020/openapi-jaxrs-context.html</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/openapi-jaxrs-context.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But, before starting the discussion of the JAX/RS context object related issues,
I shortly describe the setup of the &lt;code&gt;openapi-jaxrs&lt;/code&gt; sample project, you&amp;#8217;ll find
on the
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/tree/code&quot;&gt;code branch&lt;/a&gt;
of the Blog repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_demo_project_setup&quot;&gt;Demo Project Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The prerequisites to run the demo project are Java of version equal or
higher 8 and a current version of Maven.
The code samples shown in this Blog post use the OpenAPI Maven plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.openapitools&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;openapi-generator-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;4.2.3&amp;lt;/version&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin integrates very well with Eclipse: Updating the Maven project
executes the generator. In addition, the output directory of generated code
is automatically added as source folder to the Eclipse project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The generator places the output directory into the &lt;code&gt;target&lt;/code&gt; folder of the
project. This ensures that the code generation is executed for every build
and generated code is never put under version control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenAPI generator plugin supports several kinds of JAX/RS generators, eg.
&lt;code&gt;jaxrs-spec&lt;/code&gt;, &lt;code&gt;jaxrs-resteasy&lt;/code&gt;, &lt;code&gt;jaxrs-cxf&lt;/code&gt;. For this Blog post, we&amp;#8217;ll use
the &lt;code&gt;jaxrs-spec&lt;/code&gt; generator, which produces code that is compliant to the
Jakarta EE standard, but does not depend on a particular implementation of
this standard. Nowadays the standard APIs support all features typically
required in application development, so that implementation specific
extensions are rarely required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation of the &lt;code&gt;jaxrs-spec&lt;/code&gt; generator&amp;#8217;s options can be found on
the &lt;code&gt;OpenAPITools/openapi-generator&lt;/code&gt; Github repo at
&lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/jaxrs-spec.md&quot;&gt;JAX/RS Spec Generator&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo project is configured for the &lt;code&gt;Thorntail&lt;/code&gt; framework, which allows
convenient start of the sample application from the command-line by&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;mvn thorntail:run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the classical packaging as &lt;code&gt;war&lt;/code&gt; file and deployment to an Jakarta EE
compliant application server is equally possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_jaxrs_context&quot;&gt;JAX/RS Context&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following list enumerates all JAX/RS context objects of the JAX-RS
2.1 specification, ie. types that can be injected using the &lt;code&gt;@Context&lt;/code&gt;
annotation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;    javax.ws.rs.core.Application
    javax.ws.rs.core.HttpHeaders
    javax.ws.rs.core.Request
    javax.ws.rs.core.SecurityContext
    javax.ws.rs.core.UriInfo
    javax.ws.rs.core.Configuration
    javax.ws.rs.container.ResourceContext
    javax.ws.rs.ext.Providers
    javax.ws.rs.sse.Sse
    javax.ws.rs.sse.SseEventSink&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, the following types are available when the application in
deployed to a servlet container:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;    javax.servlet.HttpServletRequest
    javax.servlet.HttpServletResponse
    javax.servlet.ServletConfig
    javax.servlet.ServletContext&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What makes JAX/RS context objects special is that they can only injected into
JAX/RS resources itself, but not into CDI beans, that are injected into the
JAX/RS resource objects. If the JAX/RS resources reside in generated code,
the context objects are available only if the generator takes them into account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_interface_only_generation&quot;&gt;Interface-Only Generation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest solution to make JAX/RS context objects available is to generate
interfaces of the JAX/RS resources only. This can achieved by setting the
generator&amp;#8217;s option&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;  &amp;lt;interfaceOnly&amp;gt;true&amp;lt;/interfaceOnly&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;in the OpenAPI generator plugin of Maven&amp;#8217;s &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resulting generated code of a simple &lt;em&gt;greeting&lt;/em&gt; service looks then like
this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  Path(&quot;/greeting&quot;)
  @Api(description = &quot;the greeting API&quot;)
  @javax.annotation.Generated(value = &quot;org.openapitools.codegen.languages.JavaJAXRSSpecServerCodegen&quot;, date = &quot;2020-03-23T19:02:54.718784+01:00[Europe/Zurich]&quot;)
  public interface GreetingApi {

      @GET
      @ApiOperation(value = &quot;&quot;, notes = &quot;&quot;, tags={ &quot;misc&quot; })
      @ApiResponses(value = {
          @ApiResponse(code = 200, message = &quot;Returns greeting on success&quot;, response = Void.class),
          @ApiResponse(code = 405, message = &quot;Invalid input&quot;, response = Void.class) })
      Response greet(@QueryParam(&quot;name&quot;)   @ApiParam(&quot;Optional name of person to greet&quot;)  String name);
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since only interfaces are generated, the actual implementation must be coded
manually, eg.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  public class GreetingApiImpl implements GreetingApi {

  	private static final Logger LOGGER = LoggerFactory.getLogger(GreetingApiImpl.class);

  	@Context
  	HttpHeaders headers;
  	@Context
  	UriInfo uriInfo;

  	public Response greet(@QueryParam(&quot;name&quot;) @ApiParam(&quot;Optional name of person to greet&quot;) String name) {
  		StringBuilder headersBuilder = new StringBuilder(&quot;Headers:\n&quot;);
  		for (Map.Entry&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; header : headers.getRequestHeaders().entrySet()) {
  			headersBuilder.append(&quot;\t&quot;).append(header.getKey()).append(&quot;: &quot;).append(header.getValue()).append(&quot;\n&quot;);
  		}
  		LOGGER.info(headersBuilder.toString());
  		LOGGER.info(&quot;UriInfo: {}&quot;, uriInfo);

  		return Response.ok(&quot;Hello world&quot;).build();
  	}
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the JAX/RS resource implementation is hand-written, you are free to
inject any context object. In the example above, &lt;code&gt;HttpHeaders&lt;/code&gt; and
&lt;code&gt;UriInfo&lt;/code&gt; have been added for demo purposes, but any others is possible, too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_implementation_generation&quot;&gt;Implementation Generation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For some projects it might not be desired or possible to work with interfaces
of JAX/RS resource objects. Let&amp;#8217;s see what happens when we change the
OpenAPI generator to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;  &amp;lt;interfaceOnly&amp;gt;false&amp;lt;/interfaceOnly&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First difference to &lt;em&gt;interface only&lt;/em&gt; generation is that the &lt;code&gt;RestApplication&lt;/code&gt;
object is now generated and must not longer provided with the application code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The generate JAX/RS resource now looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  @Path(&quot;/greeting&quot;)
  @Api(description = &quot;the greeting API&quot;)
  @javax.annotation.Generated(value = &quot;org.openapitools.codegen.languages.JavaJAXRSSpecServerCodegen&quot;, date = &quot;2020-03-23T19:06:40.010561+01:00[Europe/Zurich]&quot;)
  public class GreetingApi {

      @GET
      @ApiOperation(value = &quot;&quot;, notes = &quot;&quot;, response = Void.class, tags={ &quot;misc&quot; })
      @ApiResponses(value = {
          @ApiResponse(code = 200, message = &quot;Returns greeting on success&quot;, response = Void.class),
          @ApiResponse(code = 405, message = &quot;Invalid input&quot;, response = Void.class)
      })
      public Response greet(@QueryParam(&quot;name&quot;)   @ApiParam(&quot;Optional name of person to greet&quot;)  String name) {
          return Response.ok().entity(&quot;magic!&quot;).build();
      }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The API method of the generated class provides an implementation already. You
might be tempted to change this implementation to your needs and add the
application&amp;#8217;s business logic here. However, the class is generated and the
next build would overwrite any manual change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What can we do about that?
Moving the generated class to the developer managed code-base is not an option,
because it violates the principle that the code is generated on each build
and generated code is never taken under version control.
The best would be to customize the generation in a way that the actual
business logic gets injected and the JAX/RS API methods just delegate to the
injected business services. This idea is based on the integration of JAX/RS
and CDI, which allows to inject arbitrary CDI beans into JAX/RS resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_template_customization&quot;&gt;Template Customization&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OpenAPITools/openapi-generator Github repository includes comprising
documentation about the customization of
&lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/blob/master/docs/templating.md&quot;&gt;Templates&lt;/a&gt;
or even the entire
&lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator/blob/master/docs/customization.md&quot;&gt;Generators&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our purposes the customization of templates is sufficient. After adding
the configuration&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;  &amp;lt;templateDirectory&amp;gt;${project.basedir}/src/main/templates&amp;lt;/templateDirectory&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to the OpenAPI generator plugin, customized Mustache templates can be provided
in defined folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The OpenAPI generator processes many template files in a generation run, but
only the customized templates need to be hosted in the project&amp;#8217;s template
directory. The remaining templates will still be retrieved from the set
of standard templates of the generator, ie. the custom teplates &lt;em&gt;shadow&lt;/em&gt;
the equally named templates of the generator.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our use case the injection of the service class need to be added in the
&lt;code&gt;api.mustache&lt;/code&gt; template file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  @Inject {{package}}.services.{{classname}}Impl delegatee;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the delegation to the injected business service need to be added
in the &lt;code&gt;apiMethod.mustache&lt;/code&gt; template file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  public Response {{nickname}}({{#allParams}}{{&amp;gt;queryParams}}{{&amp;gt;pathParams}}{{&amp;gt;headerParams}}{{&amp;gt;bodyParams}}{{&amp;gt;formParams}}{{#hasMore}},{{/hasMore}}{{/allParams}}) {
      return delegatee.{{nickname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The delegatee, ie. the CDI bean hosting the business logic, looks in its
simplest form like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  package net.gunther.blog.codegen.api.services;

  import javax.ws.rs.core.Response;

  public class GreetingApiImpl {

  	public Response greet(String name) {
  		return Response.ok(&quot;Hello world&quot;).build();
  	}
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point we achieved that the generated JAX/RS resource classes delegate
each call to a hand-written service class, that host the actual business logic.
The JAX/RS context objects are still unavailable to the application. To solve
this last challenge, we introduce a request scoped &lt;em&gt;holder&lt;/em&gt; object of the
JAX/RS context:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;@RequestScoped
public class JAXRSContext {

  private UriInfo uriInfo;
  private HttpHeaders httpHeaders;

  public UriInfo getUriInfo() {
	  return uriInfo;
  }

  public void setUriInfo(UriInfo uriInfo) {
	  this.uriInfo = uriInfo;
  }

  public HttpHeaders getHttpHeaders() {
	  return httpHeaders;
  }

  public void setHttpHeaders(HttpHeaders httpHeaders) {
	  this.httpHeaders = httpHeaders;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
For sake of simplicity, the sample code limits to &lt;code&gt;HttpHeaders&lt;/code&gt; and &lt;code&gt;UriInfo&lt;/code&gt;,
but any other JAX/RS context object can be easily added. Import statements
are also omitted.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we add the injection of the JAX/RS context objects and our new holder
object to the customized &lt;code&gt;api.mustache&lt;/code&gt; template file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  ...
  @Context UriInfo uriInfo;
  @Context HttpHeaders httpHeaders;

  @Inject JAXRSContext context;
  ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The injected objects can then be used in the generated API methods, ie. the
template &lt;code&gt;apiMethod.mustache&lt;/code&gt; file can further customized by adding:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  public Response {{nickname}}({{#allParams}}{{&amp;gt;queryParams}}{{&amp;gt;pathParams}}{{&amp;gt;headerParams}}{{&amp;gt;bodyParams}}{{&amp;gt;formParams}}{{#hasMore}},{{/hasMore}}{{/allParams}}) {
    context.setUriInfo(uriInfo);
    context.setHttpHeaders(httpHeaders);
    return delegatee.{{nickname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may have noted, that we do not add the JAX/RS holder object to the
signature of the delegatee&amp;#8217;s method.
The JAX/RS holder &lt;code&gt;context&lt;/code&gt; is a CDI bean, which is just populated with the
JAX/RS context in the generated resource class. Because the bean of type
&lt;code&gt;JAXRSContext&lt;/code&gt; is request scoped, every request processing (thread) gets its
own instance of the bean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;JAXRSContext&lt;/code&gt; is a regular CDI bean which can be injected into any other
CDI bean, eg. the delegatee&amp;#8217;s service implementation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;  public class GreetingApiImpl {

  	private static final Logger LOGGER = LoggerFactory.getLogger(GreetingApiImpl.class);

    @Inject JAXRSContext context;

  	public Response greet(String name) {
  		StringBuilder headersBuilder = new StringBuilder(&quot;Headers:\n&quot;);
  		for (Map.Entry&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; header : context.getHttpHeaders().getRequestHeaders().entrySet()) {
  			headersBuilder.append(&quot;\t&quot;).append(header.getKey()).append(&quot;: &quot;).append(header.getValue()).append(&quot;\n&quot;);
  		}
  		LOGGER.info(headersBuilder.toString());
  		LOGGER.info(&quot;UriInfo.absolutePath: {}&quot;, context.getUriInfo().getAbsolutePath());
  		return Response.ok(&quot;Hello world&quot;).build();
  	}
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When now calling the application the HTTP headers and the absolute path of the
requested JAX/RS resource are logged, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;2020-03-24 20:45:02,834 INFO  [net.gunther.blog.codegen.api.services.GreetingApiImpl] (default task-1) Headers:
	DNT: [1]
	Accept-Language: [en-US,en;q=0.5]
	Host: [localhost:8080]
	Accept: [text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8]
	User-Agent: [Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:74.0) Gecko/20100101 Firefox/74.0]
	Accept-Encoding: [gzip, deflate]
	Upgrade-Insecure-Requests: [1]
	Connection: [keep-alive]
	Cache-Control: [max-age=0]

2020-03-24 20:45:02,836 INFO  [net.gunther.blog.codegen.api.services.GreetingApiImpl] (default task-1) UriInfo.absolutePath: http://localhost:8080/greeting&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing the &lt;code&gt;JAXRSContext&lt;/code&gt; as request scoped CDI bean has several
benefits:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The technical JAX/RS context does not pollute the business interfaces
implemented by the service delegates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;JAXRSContext&lt;/code&gt; can hold any number of context objects, you can start
with just one and add more if you need more in later stages of the development.
Adding more context objects means extending the template, but does not break
a single line of existing code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;JAXRSContext&lt;/code&gt; can be injected into business logic of any level in the
call hierarchy, not only in the directly called delegatee.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;JAXRSContext&lt;/code&gt; is only injected into CDI beans that actually need the
context.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest approach when it comes to OpenAPI and its generators is to
limit the generated code to interfaces. This approach does not require
customization of templates and nevertheless leaves any implementation
option in your hands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you already generate JAX/RS resource implementations or need to customize
the generator&amp;#8217;s templates anyway, then the described JAX/RS holder object
may be an option for you. Implementing the JAX/RS holder as request scoped
CDI bean offers several benefits as listed above.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>JBake, Asciidoc and PlantUML</title>
      <link>http://www.jbake.org/blog_2020/jbake-asciidoctor-plantuml.html</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/jbake-asciidoctor-plantuml.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is really a hype to have everything in version control, namely Git, - and it
is always better to version text source than images or binary files. This applies
to diagrams, too. With the PlantUML extension Asciidoc offers a way to define
diagrams in a declarative way, but include them as images into generated
documents, eg. Blog posts like HTML pages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The use of PlantUML is actually not very difficult to configure. Because my
Blog project setup works with JBake&amp;#8217;s Maven plugin, we need to add the
dependency of &lt;code&gt;jbake-maven-plugin&lt;/code&gt; on the &lt;em&gt;diagram&lt;/em&gt; extension:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.asciidoctor&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;asciidoctorj-diagram&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.5.18&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The diagram extension includes PlantUML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next and last step is to set some properties in JBake&amp;#8217;s configuration file
&lt;code&gt;jbake.properties&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;asciidoctor.option.requires=asciidoctor-diagram
asciidoctor.attributes=sourceDir=src/main/jbake,imagesdir=assets/img/diagrams,imagesoutdir=../../assets/assets/img/diagrams,source-highlighter=highlight.js,icons=font&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re interested in the image directory configuration the
&lt;a href=&quot;https://guntherrotsch.github.io/blog_2020/non-jekyll-github-pages.html&quot;&gt;Blog post&lt;/a&gt;
gives more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_usage&quot;&gt;Usage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With described configurations in place, UML diagrams can be easily included
in Blog posts. The definition:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;[plantuml, &quot;asciidoctor-sequence-diagram&quot;, &quot;png&quot;]
----
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: another authentication Response
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;results in the diagram:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;assets/img/asciidoctor-sequence-diagram.png&quot; alt=&quot;asciidoctor sequence diagram&quot; width=&quot;298&quot; height=&quot;214&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because PlantUML includes the &lt;em&gt;Creole&lt;/em&gt; markup engine, which offers the
definition of simple &lt;em&gt;tree like&lt;/em&gt; structures, it&amp;#8217;s also possible to create
diagrams of directory hierarchies for example. The definition:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;[plantuml, &quot;file-system-tree&quot;, &quot;png&quot;, opts=&quot;inline&quot;]
----
@startuml
skinparam {
  BackgroundColor transparent
  BorderColor transparent
}
legend
Root
|_ Element 1
  |_ Element 1.1
    |_ Element 1.1.1
    |_ Element 1.1.2
  |_ Element 1.2
  |_ Element 1.3
|_ Element 2
  |_ Element 2.1
end legend
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;renders to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;assets/img/file-system-tree.png&quot; alt=&quot;file system tree&quot; width=&quot;164&quot; height=&quot;196&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>OpenAPI generated JAX/RS Service: Binary Encoding</title>
      <link>http://www.jbake.org/blog_2020/openapi-jaxrs-encoding-configuration.html</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/openapi-jaxrs-encoding-configuration.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say an API defines a response model object as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;  ....
definitions:
  SomeResponse:
    type: &quot;object&quot;
        required: &quot;data&quot;
    properties:
      ...
      data:
        description: The binary data of the response object.
        type: &quot;string&quot;
        format: &quot;byte&quot;
  ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code produced by generator &lt;code&gt;jaxrs-spec&lt;/code&gt; encodes the &lt;code&gt;data&lt;/code&gt; field as an
array of bytes (numbers). The ASCII string &quot;Java&quot; for example results in an
encoded JSON field &lt;code&gt;&quot;data&quot;: [ 112, 141, 166, 141 ]&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other side, the generator &lt;code&gt;java&lt;/code&gt; creates client code that encodes
such &lt;em&gt;byte strings&lt;/em&gt; of the API spec as base 64 strings. The sample string
&quot;Java&quot; results in &lt;code&gt;&quot;data&quot;: &quot;SmF2YQ==&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, this leads to a situation, the generated client and server are not
compatible and cannot exchange binary data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest approach to fix this issue is by configuring the binary data
strategy on the server-side:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;import javax.json.bind.*;
import javax.ws.rs.ext.*;

/**
 * The JsonbConfigurator configures the binary data strategy of JSON Binding.
 * Instead of the default strategy &quot;byte array&quot; the &quot;base 64&quot; encoding is
 * activated.
 */
@Provider
public class JsonbConfigurator implements ContextResolver&amp;lt;Jsonb&amp;gt; {

  @Override
  public Jsonb getContext(Class&amp;lt;?&amp;gt; type) {
    JsonbConfig config = getJsonbConfig();
    return JsonbBuilder.newBuilder().withConfig(config).build();
  }

  private JsonbConfig getJsonbConfig() {
    return new JsonbConfig().withBinaryDataStrategy(BinaryDataStrategy.BASE_64);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you add this class to your JAX/RS server project, client and server both
encode and decode binary data as base 64 strings and start to work well
together. Such a Jakarta EE based solution should definitely preferred over
the customization of generator&amp;#8217;s templates, in particular if you take
long-term maintainability into account.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Maven Dependecy Analyzis Plugin</title>
      <link>http://www.jbake.org/blog_2020/maven-dependency-analysis-plugin.html</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/maven-dependency-analysis-plugin.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When implementing an application I usually use the logging facade &lt;code&gt;slf4j&lt;/code&gt;. When
double-checking the dependencies of such a project with&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn dependency:analyse&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the plugin often reports&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;[WARNING] Unused declared dependencies found:
[WARNING]    org.slf4j:slf4j-log4j12:jar:1.7.26:test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But without declaring the reported &lt;code&gt;slf4j-log4j&lt;/code&gt; as dependency, the tests
suppress the log output entirely. The reason for this is that &lt;code&gt;slf4j&lt;/code&gt; logging
facade looks up available implementations of the facade interface by reflection.
If no implementation like the &lt;code&gt;slf4j-log4j&lt;/code&gt; is found, the &lt;code&gt;no-op&lt;/code&gt; logger is
installed and no logging output is generated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But we cannot blame the Maven dependency plugin, because it can only consider
dependencies explicitly defined in the POM, and not libraries resolved by
reflection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The scope of the &lt;code&gt;slf4j-log4j&lt;/code&gt; artifact is just &lt;code&gt;test&lt;/code&gt;, because at runtime the
application server provides an appropriate implementation of the logging facade
interface.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Non-Jekyll Github Pages</title>
      <link>http://www.jbake.org/blog_2020/non-jekyll-github-pages.html</link>
      <pubDate>Sat, 1 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/non-jekyll-github-pages.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Github Pages was originally designed to integrate static site-generator Jekyll.
This may still be the most applied combination. But today it&amp;#8217;s also possible
to generate a static site using a generator of your choice and publish it with
Github Pages.
Because my Blog is generated with JBake and only distribution files are pushed
to &lt;code&gt;master&lt;/code&gt; branch of Github repo, I placed an empty &lt;code&gt;.nojekyll&lt;/code&gt; file into the
web root. According to the documentation, this tells Github Pages to
skip the Jekyll build and just transfer every file hosted in &lt;code&gt;master&lt;/code&gt; branch
to the web server. However, images are still not deployed and the &lt;em&gt;alternative&lt;/em&gt;
text is shown instead to the users.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_images&quot;&gt;Images&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Github Pages documentation mentions, that images should be kept below an
&lt;code&gt;assets&lt;/code&gt; folder. This may apply for Jekyll especially, but nevertheless I
introduced such a folder and moved the images to &lt;code&gt;/assets/img&lt;/code&gt;.
Actually, I ended up with two nested folders named &lt;code&gt;assets&lt;/code&gt; in the sources of
the project. JBake removes one of them during &lt;em&gt;baking&lt;/em&gt; of the site, so that the
directory structure of the distribution contains only one folder &lt;code&gt;assets&lt;/code&gt;
possibly required by Github Pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To clean everything up a bit, the &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;fonts&lt;/code&gt;, and &lt;code&gt;js&lt;/code&gt; folders are also
moved below the &lt;code&gt;/assets&lt;/code&gt; directory. This requires adaption of the templates,
eg. the &lt;code&gt;header.ftl&lt;/code&gt; has to reference the right stylesheets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;...
&amp;lt;link href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;assets/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;link href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;assets/css/asciidoctor.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;link href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;assets/css/base.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;link href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;assets/css/prettify.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After publishing these changes, the the images embedded in the pages appear as
expected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pages_in_sub_directories&quot;&gt;Pages in Sub-directories&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The typical directory structure of a JBake project organizes HTML pages as
follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;/
   ...
   index.html
   ...
   /blog/2020
      first-post.html
      second-post.html
      ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The index page is initially presented to the user when he navigates to the
web page&amp;#8217;s root. From here users may navigate to the individual Blog posts,
which are hosted in two level deep sub-directories &lt;code&gt;/blog/&amp;lt;year&amp;gt;&lt;/code&gt;. Though,
the Blog post in sub-directories were not deployed and navigation to such pages
resulted in 404 (page not found) error pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation of Github Pages mentions, that the &lt;code&gt;Checks&lt;/code&gt; tab of the Pull
Requests should be observed for detecting issues during the Github/Jekyll build.
But I&amp;#8217;ve never seen a single message there. May be this applies to &lt;em&gt;pure&lt;/em&gt;
Jekyll builds only. In general, I find it hard to get an insight into what
happens on Github Pages. To my knowledge, it&amp;#8217;t not even possible to get an eye
on the actually distributed files hosted by the web server - please drop me
an email, if I missed something.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyway, to find by trial-and-error out what&amp;#8217;s going on during the Github Pages
build/deployment, I placed additional &lt;code&gt;index.html&lt;/code&gt; files into the directories
&lt;code&gt;/blog&lt;/code&gt; as well as &lt;code&gt;/blog/2020&lt;/code&gt;. Surprisingly, the index page in &lt;code&gt;/blog&lt;/code&gt; could
be retrieved by the Browser, but &lt;code&gt;/blog/2020&lt;/code&gt; is missing and leads a 404
(page not found) error page. Does the additional level of directories really
makes the difference? That&amp;#8217;d be far away from being logical. But after merging
the directories &lt;code&gt;/blog/2020&lt;/code&gt; to &lt;code&gt;/blog_2020&lt;/code&gt; and moving the Blog posts into the
new directory, the navigation to individual posts works fine, even on Github
Pages&apos; deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Actually, my enthusiasm for Github Pages diminished quite a bit. The process
of build and deployment could be improved to more transparency in principle.
In addition, I initially was not aware of the limitation that personal
(and organizational) Github pages can only be served from &lt;code&gt;master&lt;/code&gt; branch&amp;#8217;s
root directory, but not like project pages from a &lt;code&gt;/docs&lt;/code&gt; folder - the reason
for this limitation is not clear to me. (Because of this limitation, I
separated sources and distribution files of my project to different branches
&lt;code&gt;sources-master&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt;. The local development is then setup with a
single Git repo managing two worktrees.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, I&amp;#8217;m still excited about JBake, it&amp;#8217;s easy to use and always works as
expected. In the meantime, I also adapted several templates, which is
understandable and also well documented. JBake, really good stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>JBake Blog with Maven Plugin</title>
      <link>http://www.jbake.org/blog_2020/jbake-blog-with-maven.html</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/jbake-blog-with-maven.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_java&quot;&gt;Java&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As of the time of writing, with Java runtime 11 or higher JBake (or one
of its dependencies) logged exceptions to the console. At the first glance
JBake still seemed to work. But to be on the save side, I usually run JBake
with Java in version 8 &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I use the nice little tool &lt;a href=&quot;https://github.com/jenv/jenv&quot;&gt;jenv&lt;/a&gt;, that allows
to switch between different Java JDK versions easily. If you work on many
projects with different Java versions at the same time, you should give &lt;code&gt;jenv&lt;/code&gt;
a try,
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_github_pages&quot;&gt;Github Pages&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I decided to publish my Blog on Github pages, which are well suited for
statically generated sites. In addition, it&amp;#8217;s well integrated with git
and by that supports well-known workflows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my case, I created a personal Github Pages site by defining a repository
named &lt;code&gt;guntherrotsch.github.io&lt;/code&gt;. Project-specific Github Pages are also
possible, but could create links/URLs in some cases, which are not so nice.
Please see the
&lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages&quot;&gt;Github Pages documentation&lt;/a&gt;
for more information on setting up an appropriate repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Github Pages paragraph of the repository settings should after
configuration  look like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/Github_Pages_Setting_Blog.png&quot; alt=&quot;Image: Github Pages Setting&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The content merged to &lt;code&gt;master&lt;/code&gt; branch will be automatically published
(with a short delay of max a few minutes).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_starting_blog_project&quot;&gt;Starting Blog Project&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When setting up my Blog, the goal was to utilize JBake by Maven only.
So, I wanted to avoid to install JBake explicitly and let Maven handle
the download and integration of JBake artifacts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most explanations below apply for the JBake Maven Plugin in general,
but some are specific for settings I did for my Blog project. Please
see  the Maven
&lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/blob/master/pom.xml&quot;&gt;pom.xml&lt;/a&gt;
of my Blog project. If you also want to start your Blog with Maven and the
JBake plugin, you could even copy the POM and adapt it slightly - very few
definitions are specific to my Blog project, eg. group and artifact id.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_jbake_maven_plugin&quot;&gt;JBake Maven Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JBake Maven Plugin is hosted on
&lt;a href=&quot;https://github.com/jbake-org/jbake-maven-plugin&quot;&gt;Github&lt;/a&gt;.
There you can find some useful information to start its usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also helps a lot, that the plugin follows good practices of Maven
plugin development and provides a &lt;code&gt;help&lt;/code&gt; goal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:help   # -Ddetail=true -Dgoal=[seed|generate|watch|inline]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;jbake:help&lt;/code&gt; goal gives general information about other goals of the plugin,
it provides even more information than the Github page of JBake Maven plugin.
The &lt;code&gt;jbake:help&lt;/code&gt; called without additional parameters just lists available goals.
In addition, it considers the property System property parameters &lt;code&gt;detail&lt;/code&gt; and
&lt;code&gt;goal&lt;/code&gt; (commented out above) to give more detailed information about each
plugin&amp;#8217;s goal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_plugin_goals&quot;&gt;Plugin Goals&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most goals of the plugin consider configuration parameters. The most
important ones are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;outputDirectory&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The directory the goals write the generated output.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;inputDirectory&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The directory the goals read input from. The input directory defaults for the
most goals to &lt;code&gt;${project.basedir}/src/main/jbake)&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest way to setup the Blog project is to fetch samples templates and
content and populate the Blog project folders. This can be achieved with
the &lt;code&gt;jbake:seed&lt;/code&gt; goal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;jbake:seed&lt;/code&gt; goal is an exception to the default &lt;code&gt;outputDirectory&lt;/code&gt;
parameter, because it populates the input directory. If you don&amp;#8217;t like to
modify the &lt;code&gt;pom.xml&lt;/code&gt; temporarily for the first initialization step and work
with a copy of my POM, you can overwrite the output directory on the
command-line by defining a Java System property as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:seed -DoutputDirectory=./src/main/jbake&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we generate the sample static Blog site, you should have a look at the
jbake configuration, which is hosted in
&lt;code&gt;${project.basedir}/src/main/jbake/jbake.properties)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;#site.host=https://guntherrotsch.github.io
site.host=http://localhost:8080
render.tags=false
render.sitemap=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For local testing of the site, I&amp;#8217;ve changed the &lt;code&gt;site.host&lt;/code&gt; property temporarily
to localhost. JBake uses this parameter to generate the links between the site&amp;#8217;s
pages, which is quite important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Don&amp;#8217;t forget to change the &lt;code&gt;site.host&lt;/code&gt; to you Github Pages URL before you commit
and push the project files to Github. The commented out first line shows the
definition for my Blog site&amp;#8217;s URL.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;jbake:generate&lt;/code&gt; goal applies the project&amp;#8217;s templates to the content files
and generates the static site:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:generate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My project POM already defines input and output configuration parameters
properly. If you want to have a look at the generated site you can either serve
it by a local Web server, e.g. by executing &lt;code&gt;python3 -m http.server&lt;/code&gt; in the
site&amp;#8217;s root folder, or use the &lt;code&gt;jbake:inline&lt;/code&gt; goal, that starts JBake&amp;#8217;s
internal Web server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:inline [ -Dport=8000 ]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JBake&amp;#8217;s internal Web server listens by default on port &lt;code&gt;8080&lt;/code&gt;. If you have
another application occupying port &lt;code&gt;8080&lt;/code&gt;, then the listening port of JBake can
be changed with the &lt;code&gt;port&lt;/code&gt; parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;jbake:inline&lt;/code&gt; watches for changes of templates and content in the source
folder and re-generates the static site if any modified file is detected.
After refreshing the page in the browser you see the changes without explicitly
generating the static site again, which is very nice for a workflow. So, it&amp;#8217;s
worth considering usage of JBake&amp;#8217;s internal Web server, even if you are used
to another local Web server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now navigate with your favorite Browser to &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt; to
have a look at the sample content. After replacing the samples with your own
content and merging the changed files to &lt;code&gt;master&lt;/code&gt; branch of your Blog project,
Github Pages takes automatically care of publishing your site. Congratulations,
your Blog is up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m really happy to have selected JBake as static site generator when I started
blogging. The Java tooling feels familiar for me and JBake&amp;#8217;s features are
absolutely satisfying - I appreciate the Asciidoc support in particular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, the combination with the Maven plugin works really well. Till today I
haven&amp;#8217;t installed JBake CLI and let do Maven the job of managing the required
JBake dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Amendment, 18th of February 2020: In the meantime I found out that at least the OrientDB used by Jbake to manage the posts during the build requires Java 8.
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
