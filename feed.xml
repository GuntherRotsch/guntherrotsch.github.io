<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gunther's Blog</title>
    <link>https://guntherrotsch.github.io</link>
    <atom:link href="https://guntherrotsch.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>Gunther Rotsch - Blog</description>
    <language>en-us</language>
    <pubDate>Sun, 1 May 2022 17:48:14 +0200</pubDate>
    <lastBuildDate>Sun, 1 May 2022 17:48:14 +0200</lastBuildDate>

    <item>
      <title>Security API JSR-375 with JBoss/Wildfly, Part 2</title>
      <link>https://guntherrotsch.github.io/blog_2022/jsr-375-security-part-2.html</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2022/jsr-375-security-part-2.html</guid>
      	<description>
        Java EE 8, nowadays known as Jakarta EE 8, added a new Security API in version 1.0 to the technology stack. While the previous article was about the new API and how it integrates into Payara (Glassfish), this time we look at the integration into JBoss/Wildlfy.
	</description>
    </item>
    <item>
      <title>Security API JSR-375 with Payara/Glassfish, Part 1</title>
      <link>https://guntherrotsch.github.io/blog_2022/jsr-375-security-part-1.html</link>
      <pubDate>Thu, 7 Apr 2022 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2022/jsr-375-security-part-1.html</guid>
      	<description>
        Java EE 8, nowadays known as Jakarta EE 8, added a new Security API in version 1.0 to the technology stack. This little series of articles takes a look at the new API and how it can be used with various application servers, starting in the first part with Payara (Glassfish).
	</description>
    </item>
    <item>
      <title>Java Image Build, Part 2</title>
      <link>https://guntherrotsch.github.io/blog_2022/java-image-build-part-2.html</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2022/java-image-build-part-2.html</guid>
      	<description>
        In the previous Blog Post we packaged a single FAT JAR into a container image by utilizing JIB, the Java Image Build tool from Google. With the used Wildfly Bootable JAR some optimizations to the build process are possible. This will be subject to this Blog post.
	</description>
    </item>
    <item>
      <title>Java Image Build, Part 1</title>
      <link>https://guntherrotsch.github.io/blog_2022/java-image-build-part-1.html</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2022/java-image-build-part-1.html</guid>
      	<description>
        Container images can be built in many ways, utilizing different tools. For Java developers a Java-only solution might be appealing. One of the more popular options in this area is jib, the Java Image Build tool from Google. In this Post we&apos;ll have at the look on how it can be used to package an MicroProfile application as container image.
	</description>
    </item>
    <item>
      <title>Jakarta MVC with FreeMarker, part 2</title>
      <link>https://guntherrotsch.github.io/blog_2021/jakarta-mvc-freemarker2.html</link>
      <pubDate>Tue, 28 Dec 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/jakarta-mvc-freemarker2.html</guid>
      	<description>
        In April of this year (2021) I published a Blog Post about the integration of the Freemarker Template Engine into Jakarta MVC, the action-based Web UI framework under the hood of Jakarta EE. This Post adds some interesting features to this integration.
	</description>
    </item>
    <item>
      <title>Code-First REST API Development</title>
      <link>https://guntherrotsch.github.io/blog_2021/rest-api-code-first.html</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/rest-api-code-first.html</guid>
      	<description>
        REST APIs are ubiquitous nowadays. For development of REST APIs you can follow various philosophies and approaches. In this Blog Post we&apos;re going to discover how Eclipse MicroProfile supports the Code-First development approach.
	</description>
    </item>
    <item>
      <title>Framework-less Dependency Injection Applied, Part 2</title>
      <link>https://guntherrotsch.github.io/blog_2021/dependency-injection-part-2.html</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/dependency-injection-part-2.html</guid>
      	<description>
        In the last article we looked at the application of dependency injection in real-world software development. By applying a simple design patterns it was possible to implement lazy initialization of injected beans. In this article scopes of injected beans are discussed.
	</description>
    </item>
    <item>
      <title>Framework-less Dependency Injection Applied, Part 1</title>
      <link>https://guntherrotsch.github.io/blog_2021/dependency-injection-part-1.html</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/dependency-injection-part-1.html</guid>
      	<description>
        In the article &quot;DI without Framework&quot; (https://guntherrotsch.github.io/blog_2020/di-without-framework.html) the principles of Dependency Injection have already be entangled. Here I&apos;ll discuss possible applications and potential improvements.
	</description>
    </item>
    <item>
      <title>Functional Java: Partial Application</title>
      <link>https://guntherrotsch.github.io/blog_2021/partial-application-java.html</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/partial-application-java.html</guid>
      	<description>
        Java 8 brought lambdas to the Java language, which is a corner stone of functional programming. Although, the functional programming features of Java out of the box are limited, some interesting concepts can be implemented using it. This post is about applying function parameters partially.
	</description>
    </item>
    <item>
      <title>Pythonic Context Managers for Java</title>
      <link>https://guntherrotsch.github.io/blog_2021/pythonic-context-manager.html</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/pythonic-context-manager.html</guid>
      	<description>
        If seasoned Java developer have a look into other languages, they may find interesting constructs, idioms or solution approaches. Sometimes it&apos;s even possible to take over some ideas into the Java world. That was the case when I learned about context managers in Python.
	</description>
    </item>
    <item>
      <title>Distroless? Distroless!</title>
      <link>https://guntherrotsch.github.io/blog_2021/distroless-distroless.html</link>
      <pubDate>Wed, 2 Jun 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/distroless-distroless.html</guid>
      	<description>
        Containerization of Java applications is as easy as copying the application&apos;s Jar file into a JRE equipped base image. But choosing the right base image can be hard and have a big impact on performance, effectiveness of resource utilization, security and costs. This Blog Post discusses the trend to Distroless base images.
	</description>
    </item>
    <item>
      <title>Wildfly Bootable JAR and Static Content</title>
      <link>https://guntherrotsch.github.io/blog_2021/wildfly-bootable-static-content.html</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/wildfly-bootable-static-content.html</guid>
      	<description>
        Web applications often serve static content alongside with dynamically generated HTML pages. If the static content is not hosted on a CDN, the application server should provide this kind of content, too. In this Blog post I&apos;ll show how to configure Wildfly Bootable JAR packaged servers to do this job.
	</description>
    </item>
    <item>
      <title>Jakarta MVC with FreeMarker</title>
      <link>https://guntherrotsch.github.io/blog_2021/jakarta-mvc-freemarker.html</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2021/jakarta-mvc-freemarker.html</guid>
      	<description>
        Jakarta MVC is the coming web UI framework under the hood of Jakarta EE. One exceptional feature of Jakarta MVC is the plugable view engine architecture, which allows to integrate different template engines. This Blog post is about the integration of FreeMarker Template Engine with Jakarta MVC.
	</description>
    </item>
    <item>
      <title>Wildfly Bootable JAR Starter</title>
      <link>https://guntherrotsch.github.io/blog_2021/wildfly-bootable-jar-starter.html</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/wildfly-bootable-jar-starter.html</guid>
      	<description>
        Instantiating a Maven archetype is a convenient way to start a Java development project without any headache of the setup. Unfortunately, I haven&apos;t found any Maven archetype for Wildfly Bootable JAR projects. Instead of creating an archetype myself, I found another efficient way to get the setup of a Wildfly Bootable JAR project done.
	</description>
    </item>
    <item>
      <title>JAX/RS Multipart Server</title>
      <link>https://guntherrotsch.github.io/blog_2021/jaxrs-multipart-server.html</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/jaxrs-multipart-server.html</guid>
      	<description>
        Multipart form-data messages are a standard format when submitting HTML forms by web applications. If you want to learn more about the processing of such requests by Jakarta EE JAXRS servers this Blog post might be interesting for you.
	</description>
    </item>
    <item>
      <title>JAX/RS Multipart Client</title>
      <link>https://guntherrotsch.github.io/blog_2021/jaxrs-multipart-client.html</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/jaxrs-multipart-client.html</guid>
      	<description>
        Jakarta EE standards do not support HTTP multipart messages very well. This may be the reason that multipart endpoints are rarely seen in REST APIs. However, sometimes we find the multipart/form-data content type used to upload files. This Blog demonstrates an approach on how such endpoints can be utilized by standard JAXRS Clients.
	</description>
    </item>
    <item>
      <title>Wildfly Bootable JAR</title>
      <link>https://guntherrotsch.github.io/blog_2021/wildfly-bootable-jar.html</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2021/wildfly-bootable-jar.html</guid>
      	<description>
        The JBoss/Wildfly ecosystem is very rich and popular in enterprise computing. But targeting cloud platforms the application server approach is not appropriate. Single (FAT) JAR packaging is much more common for containerized deployments. After the end of Thorntail the Wildfly project offers with &quot;Wildfly Bootable JAR&quot; a new deployment option of this kind.
	</description>
    </item>
    <item>
      <title>Dependency Injection Without Framework</title>
      <link>https://guntherrotsch.github.io/blog_2020/di-without-framework.html</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/di-without-framework.html</guid>
      	<description>
        Dependency injection is often named in one breath with technologies like Spring or Jakarta EE&apos;s CDI. But dependency injection is a Software design principle, which is not equal to a particular technology.
	</description>
    </item>
    <item>
      <title>Maven And The Classpath</title>
      <link>https://guntherrotsch.github.io/blog_2020/maven-classpath.html</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/maven-classpath.html</guid>
      	<description>
        When Maven&apos;s Surefire plugin executes unit tests of a project, developers do not need to provide the classpath containing all dependencies. Instead, Maven sets up the required classpath. Other plugins utilize the Maven generated classpath, too. This Blog post is about some of the usages of the Maven classpath.
	</description>
    </item>
    <item>
      <title>Executable Scripts with Java</title>
      <link>https://guntherrotsch.github.io/blog_2020/executable-java-scripting.html</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/executable-java-scripting.html</guid>
      	<description>
        The more recent versions of the JDK allow running Java code from source. This can be used to create a user experience close to scripting languages. This post demonstrate how to use it and explores in addition an option applicable for older versions of Java.
	</description>
    </item>
    <item>
      <title>Cloud-native Java with Quarkus</title>
      <link>https://guntherrotsch.github.io/blog_2020/quarkus-first-steps.html</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/quarkus-first-steps.html</guid>
      	<description>
        The Java enterprise ecosystem is changing rapidly. One of the shooting stars is the Quarkus framework. It describes itself as &quot;Supersonic Subatomic Java&quot; and &quot;Kubernetes Native Java stack&quot;. This Blog post describes the first experience I made with Quarkus.
	</description>
    </item>
    <item>
      <title>Sharing Host File with Container</title>
      <link>https://guntherrotsch.github.io/blog_2020/file-sharing-with-container.html</link>
      <pubDate>Tue, 9 Jun 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/file-sharing-with-container.html</guid>
      	<description>
        Developing Cloud-native environments fosters the trend to a new kind of development environments, which are also hosted in the cloud. Beside Github&apos;s Codespaces, Eclipse Che is one of the players at this ground. To get a first impression of the new type of IDE, I tried Eclipse Theia locally using the project&apos;s pre-defined Docker image. In doing so, I learned something interesting about sharing files with containers.
	</description>
    </item>
    <item>
      <title>Cloud-native Java</title>
      <link>https://guntherrotsch.github.io/blog_2020/containerized-java-app.html</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/containerized-java-app.html</guid>
      	<description>
        There&apos;s a strong trend in modern IT to migrate on-premises installations to cloud platforms. Independent of the migration strategy, either Lift-and-Shift or re-implement applications, this blog casts an eye on the popular Java platform deployed to the cloud.
	</description>
    </item>
    <item>
      <title>OpenApi generated JAX/RS Service: Bean Validation</title>
      <link>https://guntherrotsch.github.io/blog_2020/openapi-bean-validation.html</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog_2020/openapi-bean-validation.html</guid>
      	<description>
        Validation of input data is a crucial requirement for any serious application. This also applies to REST services implemented with JAX/RS. If you follow a Design-First development approach with Swagger/OpenAPI, server stubs and model objects are usually generated. The generated code of API&apos;s model classes already contain JSR 380 annotations, which trigger validation of received request objects by the Bean Validation 2.0 framework. This article is about application-specific extension of validation rules for generated model classes.
	</description>
    </item>
    <item>
      <title>OpenApi generated JAX/RS Service: JAX/RS Context</title>
      <link>https://guntherrotsch.github.io/blog_2020/openapi-jaxrs-context.html</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/openapi-jaxrs-context.html</guid>
      	<description>
        Implementing JAX/RS REST APIs with Swagger/OpenAPI, the language agnostic interface to RESTful APIs, following an API Design-First approach starts with the formal specification of the REST API. Then OpenAPI generators are used to create server stubs. These code generators create specific problems, that may require customization of templates or the whole generator. This article describes several solutions that are related to the JAX/RS context objects.
	</description>
    </item>
    <item>
      <title>JBake, Asciidoc and PlantUML</title>
      <link>https://guntherrotsch.github.io/blog_2020/jbake-asciidoctor-plantuml.html</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/jbake-asciidoctor-plantuml.html</guid>
      	<description>
        When blogging about software topics it becomes quickly compelling to include diagrams into the posts. The project PlantUML for writing UML as diagrams-as-a-code is well suited for those needs. This Blog post is about, how PlantUML is configured with Asciidoc and JBake.
	</description>
    </item>
    <item>
      <title>OpenAPI generated JAX/RS Service: Binary Encoding</title>
      <link>https://guntherrotsch.github.io/blog_2020/openapi-jaxrs-encoding-configuration.html</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/openapi-jaxrs-encoding-configuration.html</guid>
      	<description>
        Implementing JAX/RS REST APIs with Swagger/OpenAPI following a Design-First approach starts with the formal specification of the REST API. Then OpenAPI generators are used to create server as well as client stubs. Nowadays, the REST APIs often exchange JSON response and request objects. If binary fields are part of such JSON structures, the generated code encodes/decodes such binary fields. For some combinations of generators the produced client and server do not fit together.
	</description>
    </item>
    <item>
      <title>Maven Dependecy Analyzis Plugin</title>
      <link>https://guntherrotsch.github.io/blog_2020/maven-dependency-analysis-plugin.html</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/maven-dependency-analysis-plugin.html</guid>
      	<description>
        Note on usage of Maven&apos;s dependency plugin for analyzing project dependencies.
	</description>
    </item>
    <item>
      <title>Non-Jekyll Github Pages</title>
      <link>https://guntherrotsch.github.io/blog_2020/non-jekyll-github-pages.html</link>
      <pubDate>Sat, 1 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/non-jekyll-github-pages.html</guid>
      	<description>
        After initially setting up my Blog (see previous post &apos;JBake Blog with Maven Plugin&apos;), I noticed that the deployment to Github Pages is not fully functional, although with local web server everything works fine. The problems were: 1) images are not shown, 2) navigation to posts, that are hosted in sub-directories, lead to 404 error (page not found). This post is about possible solutions for described issues.
	</description>
    </item>
    <item>
      <title>JBake Blog with Maven Plugin</title>
      <link>https://guntherrotsch.github.io/blog_2020/jbake-blog-with-maven.html</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/jbake-blog-with-maven.html</guid>
      	<description>
        When I decided to start blogging, the combination of Github pages and JBake looked most promising to me: Out-of-the-box support of Asciidoc, Java application should be friendly for me as Java developer, one of the most popular static site generators, etc.&amp;lt;p&amp;gt; There are many articles and blog posts about the combination of JBake and Gradle. But because I&apos;m much more familiar with Maven and Maven tooling was already installed on my Notebook, I decided to try the JBake&apos;s Maven plugin for stetting up the static Blog site.
	</description>
    </item>

  </channel>
</rss>
